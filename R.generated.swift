//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 11 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Gotham Rounded Bold Italic.otf`.
    static let gothamRoundedBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Bold Italic", pathExtension: "otf")
    /// Resource file `Gotham Rounded Bold.otf`.
    static let gothamRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Bold", pathExtension: "otf")
    /// Resource file `Gotham Rounded Book Italic.otf`.
    static let gothamRoundedBookItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Book Italic", pathExtension: "otf")
    /// Resource file `Gotham Rounded Book.otf`.
    static let gothamRoundedBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Book", pathExtension: "otf")
    /// Resource file `Gotham Rounded Light Italic.otf`.
    static let gothamRoundedLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Light Italic", pathExtension: "otf")
    /// Resource file `Gotham Rounded Light.otf`.
    static let gothamRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Light", pathExtension: "otf")
    /// Resource file `Gotham Rounded Medium Italic.otf`.
    static let gothamRoundedMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Medium Italic", pathExtension: "otf")
    /// Resource file `Gotham Rounded Medium.otf`.
    static let gothamRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Medium", pathExtension: "otf")
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    /// Resource file `Woojo.entitlements`.
    static let woojoEntitlements = Rswift.FileResource(bundle: R.hostingBundle, name: "Woojo", pathExtension: "entitlements")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Bold Italic", withExtension: "otf")`
    static func gothamRoundedBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Bold", withExtension: "otf")`
    static func gothamRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Book Italic", withExtension: "otf")`
    static func gothamRoundedBookItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Book", withExtension: "otf")`
    static func gothamRoundedBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Light Italic", withExtension: "otf")`
    static func gothamRoundedLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Light", withExtension: "otf")`
    static func gothamRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Medium Italic", withExtension: "otf")`
    static func gothamRoundedMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Gotham Rounded Medium", withExtension: "otf")`
    static func gothamRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Woojo", withExtension: "entitlements")`
    static func woojoEntitlements(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.woojoEntitlements
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamRounded-BoldItalic`.
    static let gothamRoundedBoldItalic = Rswift.FontResource(fontName: "GothamRounded-BoldItalic")
    /// Font `GothamRounded-Bold`.
    static let gothamRoundedBold = Rswift.FontResource(fontName: "GothamRounded-Bold")
    /// Font `GothamRounded-BookItalic`.
    static let gothamRoundedBookItalic = Rswift.FontResource(fontName: "GothamRounded-BookItalic")
    /// Font `GothamRounded-Book`.
    static let gothamRoundedBook = Rswift.FontResource(fontName: "GothamRounded-Book")
    /// Font `GothamRounded-LightItalic`.
    static let gothamRoundedLightItalic = Rswift.FontResource(fontName: "GothamRounded-LightItalic")
    /// Font `GothamRounded-Light`.
    static let gothamRoundedLight = Rswift.FontResource(fontName: "GothamRounded-Light")
    /// Font `GothamRounded-MediumItalic`.
    static let gothamRoundedMediumItalic = Rswift.FontResource(fontName: "GothamRounded-MediumItalic")
    /// Font `GothamRounded-Medium`.
    static let gothamRoundedMedium = Rswift.FontResource(fontName: "GothamRounded-Medium")
    
    /// `UIFont(name: "GothamRounded-Bold", size: ...)`
    static func gothamRoundedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBold, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-BoldItalic", size: ...)`
    static func gothamRoundedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBoldItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Book", size: ...)`
    static func gothamRoundedBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBook, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-BookItalic", size: ...)`
    static func gothamRoundedBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBookItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Light", size: ...)`
    static func gothamRoundedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLight, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-LightItalic", size: ...)`
    static func gothamRoundedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLightItalic, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-Medium", size: ...)`
    static func gothamRoundedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedMedium, size: size)
    }
    
    /// `UIFont(name: "GothamRounded-MediumItalic", size: ...)`
    static func gothamRoundedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedMediumItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.gothamRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Bold' could not be loaded, is 'Gotham Rounded Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-LightItalic' could not be loaded, is 'Gotham Rounded Light Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Book' could not be loaded, is 'Gotham Rounded Book.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BookItalic' could not be loaded, is 'Gotham Rounded Book Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BoldItalic' could not be loaded, is 'Gotham Rounded Bold Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-MediumItalic' could not be loaded, is 'Gotham Rounded Medium Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Light' could not be loaded, is 'Gotham Rounded Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Medium' could not be loaded, is 'Gotham Rounded Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 64 images.
  struct image {
    /// Image `1 - Woojo logo`.
    static let woojoLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "1 - Woojo logo")
    /// Image `Eventbrite icon`.
    static let eventbriteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Eventbrite icon")
    /// Image `Eventbrite_wordmark_orange_w150`.
    static let eventbrite_wordmark_orange_w150 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Eventbrite_wordmark_orange_w150")
    /// Image `Facebook icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebook icon")
    /// Image `Festival Star`.
    static let festivalStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Festival Star")
    /// Image `Festivals title`.
    static let festivalsTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Festivals title")
    /// Image `Networking title`.
    static let networkingTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Networking title")
    /// Image `Networking`.
    static let networking = Rswift.ImageResource(bundle: R.hostingBundle, name: "Networking")
    /// Image `Parties title`.
    static let partiesTitle = Rswift.ImageResource(bundle: R.hostingBundle, name: "Parties title")
    /// Image `Parties`.
    static let parties = Rswift.ImageResource(bundle: R.hostingBundle, name: "Parties")
    /// Image `Profile card`.
    static let profileCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile card")
    /// Image `Rotated profile card`.
    static let rotatedProfileCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rotated profile card")
    /// Image `albums`.
    static let albums = Rswift.ImageResource(bundle: R.hostingBundle, name: "albums")
    /// Image `arrow_back`.
    static let arrow_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_back")
    /// Image `arrow_forward`.
    static let arrow_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_forward")
    /// Image `attachment`.
    static let attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachment")
    /// Image `blue_verified`.
    static let blue_verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue_verified")
    /// Image `bokeh`.
    static let bokeh = Rswift.ImageResource(bundle: R.hostingBundle, name: "bokeh")
    /// Image `briefcase`.
    static let briefcase = Rswift.ImageResource(bundle: R.hostingBundle, name: "briefcase")
    /// Image `candidates_tab`.
    static let candidates_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "candidates_tab")
    /// Image `chats_tab`.
    static let chats_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "chats_tab")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `eventbrite_logo_light_gray_128`.
    static let eventbrite_logo_light_gray_128 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eventbrite_logo_light_gray_128")
    /// Image `eventbrite_section_selected`.
    static let eventbrite_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "eventbrite_section_selected")
    /// Image `eventbrite_section`.
    static let eventbrite_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "eventbrite_section")
    /// Image `events_tab_padded`.
    static let events_tab_padded = Rswift.ImageResource(bundle: R.hostingBundle, name: "events_tab_padded")
    /// Image `events_tab`.
    static let events_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "events_tab")
    /// Image `events`.
    static let events = Rswift.ImageResource(bundle: R.hostingBundle, name: "events")
    /// Image `explore_events`.
    static let explore_events = Rswift.ImageResource(bundle: R.hostingBundle, name: "explore_events")
    /// Image `explore_section_selected`.
    static let explore_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "explore_section_selected")
    /// Image `explore_section`.
    static let explore_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "explore_section")
    /// Image `facebook_section_selected`.
    static let facebook_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook_section_selected")
    /// Image `facebook_section`.
    static let facebook_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook_section")
    /// Image `flights_section_selected`.
    static let flights_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "flights_section_selected")
    /// Image `flights_section`.
    static let flights_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "flights_section")
    /// Image `gray_verified`.
    static let gray_verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "gray_verified")
    /// Image `icon_iphone_2x`.
    static let icon_iphone_2x = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_iphone_2x")
    /// Image `icon_iphone_3x`.
    static let icon_iphone_3x = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_iphone_3x")
    /// Image `icon_rounded`.
    static let icon_rounded = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_rounded")
    /// Image `joon`.
    static let joon = Rswift.ImageResource(bundle: R.hostingBundle, name: "joon")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `login_bg`.
    static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_bg")
    /// Image `my_events`.
    static let my_events = Rswift.ImageResource(bundle: R.hostingBundle, name: "my_events")
    /// Image `onboarding_close`.
    static let onboarding_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_close")
    /// Image `online_show`.
    static let online_show = Rswift.ImageResource(bundle: R.hostingBundle, name: "online_show")
    /// Image `options`.
    static let options = Rswift.ImageResource(bundle: R.hostingBundle, name: "options")
    /// Image `people_tab`.
    static let people_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "people_tab")
    /// Image `people`.
    static let people = Rswift.ImageResource(bundle: R.hostingBundle, name: "people")
    /// Image `photos`.
    static let photos = Rswift.ImageResource(bundle: R.hostingBundle, name: "photos")
    /// Image `placeholder_100x100`.
    static let placeholder_100x100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_100x100")
    /// Image `placeholder_40x40`.
    static let placeholder_40x40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_40x40")
    /// Image `plan_section_selected`.
    static let plan_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "plan_section_selected")
    /// Image `plan_section`.
    static let plan_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "plan_section")
    /// Image `plan`.
    static let plan = Rswift.ImageResource(bundle: R.hostingBundle, name: "plan")
    /// Image `plane`.
    static let plane = Rswift.ImageResource(bundle: R.hostingBundle, name: "plane")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `search_events`.
    static let search_events = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_events")
    /// Image `search_section_selected`.
    static let search_section_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_section_selected")
    /// Image `search_section`.
    static let search_section = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_section")
    /// Image `spark`.
    static let spark = Rswift.ImageResource(bundle: R.hostingBundle, name: "spark")
    /// Image `tip`.
    static let tip = Rswift.ImageResource(bundle: R.hostingBundle, name: "tip")
    /// Image `woojo_icon`.
    static let woojo_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "woojo_icon")
    /// Image `woojo`.
    static let woojo = Rswift.ImageResource(bundle: R.hostingBundle, name: "woojo")
    
    /// `UIImage(named: "1 - Woojo logo", bundle: ..., traitCollection: ...)`
    static func woojoLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woojoLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Eventbrite icon", bundle: ..., traitCollection: ...)`
    static func eventbriteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventbriteIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Eventbrite_wordmark_orange_w150", bundle: ..., traitCollection: ...)`
    static func eventbrite_wordmark_orange_w150(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventbrite_wordmark_orange_w150, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Facebook icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Festival Star", bundle: ..., traitCollection: ...)`
    static func festivalStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.festivalStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Festivals title", bundle: ..., traitCollection: ...)`
    static func festivalsTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.festivalsTitle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Networking title", bundle: ..., traitCollection: ...)`
    static func networkingTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.networkingTitle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Networking", bundle: ..., traitCollection: ...)`
    static func networking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.networking, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Parties title", bundle: ..., traitCollection: ...)`
    static func partiesTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.partiesTitle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Parties", bundle: ..., traitCollection: ...)`
    static func parties(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parties, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Profile card", bundle: ..., traitCollection: ...)`
    static func profileCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rotated profile card", bundle: ..., traitCollection: ...)`
    static func rotatedProfileCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotatedProfileCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "albums", bundle: ..., traitCollection: ...)`
    static func albums(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.albums, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_back", bundle: ..., traitCollection: ...)`
    static func arrow_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_forward", bundle: ..., traitCollection: ...)`
    static func arrow_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachment", bundle: ..., traitCollection: ...)`
    static func attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blue_verified", bundle: ..., traitCollection: ...)`
    static func blue_verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blue_verified, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bokeh", bundle: ..., traitCollection: ...)`
    static func bokeh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bokeh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "briefcase", bundle: ..., traitCollection: ...)`
    static func briefcase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.briefcase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "candidates_tab", bundle: ..., traitCollection: ...)`
    static func candidates_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.candidates_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chats_tab", bundle: ..., traitCollection: ...)`
    static func chats_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chats_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eventbrite_logo_light_gray_128", bundle: ..., traitCollection: ...)`
    static func eventbrite_logo_light_gray_128(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventbrite_logo_light_gray_128, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eventbrite_section", bundle: ..., traitCollection: ...)`
    static func eventbrite_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventbrite_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eventbrite_section_selected", bundle: ..., traitCollection: ...)`
    static func eventbrite_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventbrite_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "events", bundle: ..., traitCollection: ...)`
    static func events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "events_tab", bundle: ..., traitCollection: ...)`
    static func events_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.events_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "events_tab_padded", bundle: ..., traitCollection: ...)`
    static func events_tab_padded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.events_tab_padded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explore_events", bundle: ..., traitCollection: ...)`
    static func explore_events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore_events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explore_section", bundle: ..., traitCollection: ...)`
    static func explore_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "explore_section_selected", bundle: ..., traitCollection: ...)`
    static func explore_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.explore_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook_section", bundle: ..., traitCollection: ...)`
    static func facebook_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook_section_selected", bundle: ..., traitCollection: ...)`
    static func facebook_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flights_section", bundle: ..., traitCollection: ...)`
    static func flights_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flights_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flights_section_selected", bundle: ..., traitCollection: ...)`
    static func flights_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flights_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gray_verified", bundle: ..., traitCollection: ...)`
    static func gray_verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gray_verified, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_iphone_2x", bundle: ..., traitCollection: ...)`
    static func icon_iphone_2x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_iphone_2x, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_iphone_3x", bundle: ..., traitCollection: ...)`
    static func icon_iphone_3x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_iphone_3x, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_rounded", bundle: ..., traitCollection: ...)`
    static func icon_rounded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rounded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "joon", bundle: ..., traitCollection: ...)`
    static func joon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.joon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
    static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "my_events", bundle: ..., traitCollection: ...)`
    static func my_events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my_events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_close", bundle: ..., traitCollection: ...)`
    static func onboarding_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "online_show", bundle: ..., traitCollection: ...)`
    static func online_show(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.online_show, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "options", bundle: ..., traitCollection: ...)`
    static func options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.options, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "people", bundle: ..., traitCollection: ...)`
    static func people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "people_tab", bundle: ..., traitCollection: ...)`
    static func people_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photos", bundle: ..., traitCollection: ...)`
    static func photos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_100x100", bundle: ..., traitCollection: ...)`
    static func placeholder_100x100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_100x100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_40x40", bundle: ..., traitCollection: ...)`
    static func placeholder_40x40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_40x40, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plan", bundle: ..., traitCollection: ...)`
    static func plan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plan_section", bundle: ..., traitCollection: ...)`
    static func plan_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plan_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plan_section_selected", bundle: ..., traitCollection: ...)`
    static func plan_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plan_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plane", bundle: ..., traitCollection: ...)`
    static func plane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plane, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_events", bundle: ..., traitCollection: ...)`
    static func search_events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_section", bundle: ..., traitCollection: ...)`
    static func search_section(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_section, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_section_selected", bundle: ..., traitCollection: ...)`
    static func search_section_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_section_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "spark", bundle: ..., traitCollection: ...)`
    static func spark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tip", bundle: ..., traitCollection: ...)`
    static func tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woojo", bundle: ..., traitCollection: ...)`
    static func woojo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woojo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woojo_icon", bundle: ..., traitCollection: ...)`
    static func woojo_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woojo_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `AlbumsTableViewCell`.
    static let albumsTableViewCell = _R.nib._AlbumsTableViewCell()
    /// Nib `CandidateCardOverlayView`.
    static let candidateCardOverlayView = _R.nib._CandidateCardOverlayView()
    /// Nib `CandidateCardView`.
    static let candidateCardView = _R.nib._CandidateCardView()
    /// Nib `CandidateCommonEventTableViewCell`.
    static let candidateCommonEventTableViewCell = _R.nib._CandidateCommonEventTableViewCell()
    /// Nib `CandidateExtraCommonEventsTableViewCell`.
    static let candidateExtraCommonEventsTableViewCell = _R.nib._CandidateExtraCommonEventsTableViewCell()
    /// Nib `EventTableViewCell`.
    static let eventTableViewCell = _R.nib._EventTableViewCell()
    /// Nib `EventbriteLoginView`.
    static let eventbriteLoginView = _R.nib._EventbriteLoginView()
    /// Nib `UserChatBannerView`.
    static let userChatBannerView = _R.nib._UserChatBannerView()
    /// Nib `UserCommonFriendCollectionViewCell`.
    static let userCommonFriendCollectionViewCell = _R.nib._UserCommonFriendCollectionViewCell()
    /// Nib `UserCommonItemCollectionViewCell`.
    static let userCommonItemCollectionViewCell = _R.nib._UserCommonItemCollectionViewCell()
    /// Nib `UserDetailsCommonEventTableViewCell`.
    static let userDetailsCommonEventTableViewCell = _R.nib._UserDetailsCommonEventTableViewCell()
    /// Nib `UserDetailsView`.
    static let userDetailsView = _R.nib._UserDetailsView()
    
    /// `UINib(name: "AlbumsTableViewCell", in: bundle)`
    static func albumsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.albumsTableViewCell)
    }
    
    /// `UINib(name: "CandidateCardOverlayView", in: bundle)`
    static func candidateCardOverlayView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candidateCardOverlayView)
    }
    
    /// `UINib(name: "CandidateCardView", in: bundle)`
    static func candidateCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candidateCardView)
    }
    
    /// `UINib(name: "CandidateCommonEventTableViewCell", in: bundle)`
    static func candidateCommonEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candidateCommonEventTableViewCell)
    }
    
    /// `UINib(name: "CandidateExtraCommonEventsTableViewCell", in: bundle)`
    static func candidateExtraCommonEventsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.candidateExtraCommonEventsTableViewCell)
    }
    
    /// `UINib(name: "EventTableViewCell", in: bundle)`
    static func eventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventTableViewCell)
    }
    
    /// `UINib(name: "EventbriteLoginView", in: bundle)`
    static func eventbriteLoginView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventbriteLoginView)
    }
    
    /// `UINib(name: "UserChatBannerView", in: bundle)`
    static func userChatBannerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userChatBannerView)
    }
    
    /// `UINib(name: "UserCommonFriendCollectionViewCell", in: bundle)`
    static func userCommonFriendCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCommonFriendCollectionViewCell)
    }
    
    /// `UINib(name: "UserCommonItemCollectionViewCell", in: bundle)`
    static func userCommonItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCommonItemCollectionViewCell)
    }
    
    /// `UINib(name: "UserDetailsCommonEventTableViewCell", in: bundle)`
    static func userDetailsCommonEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDetailsCommonEventTableViewCell)
    }
    
    /// `UINib(name: "UserDetailsView", in: bundle)`
    static func userDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userDetailsView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContactCell`.
    static let contactCell: Rswift.ReuseIdentifier<Woojo.ALContactCell> = Rswift.ReuseIdentifier(identifier: "ContactCell")
    /// Reuse identifier `OnboardingPhotoCell`.
    static let onboardingPhotoCell: Rswift.ReuseIdentifier<ProfilePhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "OnboardingPhotoCell")
    /// Reuse identifier `ProfilePhotoCell`.
    static let profilePhotoCell: Rswift.ReuseIdentifier<ProfilePhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ProfilePhotoCell")
    /// Reuse identifier `albumCell`.
    static let albumCell: Rswift.ReuseIdentifier<AlbumsTableViewCell> = Rswift.ReuseIdentifier(identifier: "albumCell")
    /// Reuse identifier `commonEventCell`.
    static let commonEventCell: Rswift.ReuseIdentifier<CandidateCommonEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "commonEventCell")
    /// Reuse identifier `commonFriendCell`.
    static let commonFriendCell: Rswift.ReuseIdentifier<UserCommonFriendCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "commonFriendCell")
    /// Reuse identifier `commonItemCell`.
    static let commonItemCell: Rswift.ReuseIdentifier<UserCommonItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "commonItemCell")
    /// Reuse identifier `descriptionCell`.
    static let descriptionCell: Rswift.ReuseIdentifier<EventDescriptionTableViewCell> = Rswift.ReuseIdentifier(identifier: "descriptionCell")
    /// Reuse identifier `detailsCell`.
    static let detailsCell: Rswift.ReuseIdentifier<EventDetailsTableViewCell> = Rswift.ReuseIdentifier(identifier: "detailsCell")
    /// Reuse identifier `detailsCommonEventCell`.
    static let detailsCommonEventCell: Rswift.ReuseIdentifier<UserDetailsCommonEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "detailsCommonEventCell")
    /// Reuse identifier `eventCell`.
    static let eventCell: Rswift.ReuseIdentifier<EventTableViewCell> = Rswift.ReuseIdentifier(identifier: "eventCell")
    /// Reuse identifier `eventMatchCell`.
    static let eventMatchCell: Rswift.ReuseIdentifier<EventMatchCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "eventMatchCell")
    /// Reuse identifier `extraCommonEventsCell`.
    static let extraCommonEventsCell: Rswift.ReuseIdentifier<CandidateExtraCommonEventsTableViewCell> = Rswift.ReuseIdentifier(identifier: "extraCommonEventsCell")
    /// Reuse identifier `groupCell`.
    static let groupCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "groupCell")
    /// Reuse identifier `matchesCell`.
    static let matchesCell: Rswift.ReuseIdentifier<EventMatchesTableViewCell> = Rswift.ReuseIdentifier(identifier: "matchesCell")
    /// Reuse identifier `photoCell`.
    static let photoCell: Rswift.ReuseIdentifier<AlbumPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "photoCell")
    /// Reuse identifier `photoTip`.
    static let photoTip: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "photoTip")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `AboutViewController`, and contains static references to 1 segues.
    struct aboutViewController {
      /// Segue identifier `unwindToMainTabBar`.
      static let unwindToMainTabBar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AboutViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToMainTabBar")
      
      /// Optionally returns a typed version of segue `unwindToMainTabBar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToMainTabBar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AboutViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.aboutViewController.unwindToMainTabBar, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NavigationController`, and contains static references to 1 segues.
    struct navigationController {
      /// Segue identifier `unwindToMainTabBar`.
      static let unwindToMainTabBar: Rswift.StoryboardSegueIdentifier<UnwindThenShowChatSegue, NavigationController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToMainTabBar")
      
      /// Optionally returns a typed version of segue `unwindToMainTabBar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToMainTabBar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UnwindThenShowChatSegue, NavigationController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.navigationController.unwindToMainTabBar, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 121 localization keys.
    struct localizable {
      /// Base translation: %d %@ left
      /// 
      /// Locales: Base, fr
      static let dLeft = Rswift.StringResource(key: "%d %@ left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: %d going
      /// 
      /// Locales: Base, fr
      static let dGoing = Rswift.StringResource(key: "%d going", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: %d invited
      /// 
      /// Locales: Base, fr
      static let dInvited = Rswift.StringResource(key: "%d invited", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: %d maybe
      /// 
      /// Locales: Base, fr
      static let dMaybe = Rswift.StringResource(key: "%d maybe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: %d photo%@
      /// 
      /// Locales: Base, fr
      static let dPhoto = Rswift.StringResource(key: "%d photo%@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: +%d more common %@
      /// 
      /// Locales: Base, fr
      static let dMoreCommon = Rswift.StringResource(key: "+%d more common %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: About %@
      /// 
      /// Locales: Base, fr
      static let about = Rswift.StringResource(key: "About %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: About %@
      /// 
      /// Locales: Base, fr
      static let peopleDetailsAbout = Rswift.StringResource(key: "peopleDetailsAbout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Add Event
      /// 
      /// Locales: Base, fr
      static let addEvent = Rswift.StringResource(key: "Add Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Add Photo
      /// 
      /// Locales: Base, fr
      static let addPhoto = Rswift.StringResource(key: "Add Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Adding event...
      /// 
      /// Locales: Base, fr
      static let addingEvent = Rswift.StringResource(key: "Adding event...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Chats
      /// 
      /// Locales: Base, fr
      static let chats = Rswift.StringResource(key: "Chats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Choose a date and a place Discover people with the same plan!
      /// 
      /// Locales: Base, fr
      static let chooseADateAndAPlaceDiscoverPeopleWithTheSamePlan = Rswift.StringResource(key: "Choose a date and a place\nDiscover people with the same plan!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Close
      /// 
      /// Locales: Base, fr
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Closing chat
      /// 
      /// Locales: Base, fr
      static let closingChat = Rswift.StringResource(key: "Closing chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Common Events
      /// 
      /// Locales: Base, fr
      static let commonEvents = Rswift.StringResource(key: "Common Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Common Interests
      /// 
      /// Locales: Base, fr
      static let commonInterests = Rswift.StringResource(key: "Common Interests", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Confirm report?
      /// 
      /// Locales: Base, fr
      static let confirmUnmatchAndReport = Rswift.StringResource(key: "confirmUnmatchAndReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Confirm unmatch?
      /// 
      /// Locales: Base, fr
      static let confirmUnmatch = Rswift.StringResource(key: "confirmUnmatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Currently unavailable
      /// 
      /// Locales: Base, fr
      static let currentlyUnavailable = Rswift.StringResource(key: "Currently unavailable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Delete
      /// 
      /// Locales: Base, fr
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Delete Account
      /// 
      /// Locales: Base, fr
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Discover people in your %d new events!
      /// 
      /// Locales: Base, fr
      static let discoverPeopleInYourDNewEvents = Rswift.StringResource(key: "Discover people in your %d new events!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Done!
      /// 
      /// Locales: Base, fr
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Due to temporary changes in Facebook's privacy policy, your events are inaccessible at this time.  This feature will be re-activated when access is restored.
      /// 
      /// Locales: Base, fr
      static let dueToTemporaryChangesInFacebookSPrivacyPolicyYourEventsAreInaccessibleAtThisTimeThisFeatureWillBeReActivatedWhenAccessIsRestored = Rswift.StringResource(key: "Due to temporary changes in Facebook's privacy policy, your events are inaccessible at this time.\n\nThis feature will be re-activated when access is restored.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base, fr
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Event added!
      /// 
      /// Locales: Base, fr
      static let eventAdded = Rswift.StringResource(key: "Event added!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Event removed!
      /// 
      /// Locales: Base, fr
      static let eventRemoved = Rswift.StringResource(key: "Event removed!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Eventbrite
      /// 
      /// Locales: Base, fr
      static let eventbrite = Rswift.StringResource(key: "eventbrite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Facebook
      /// 
      /// Locales: Base, fr
      static let facebook = Rswift.StringResource(key: "Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Facebook Albums
      /// 
      /// Locales: Base, fr
      static let facebookAlbums = Rswift.StringResource(key: "Facebook Albums", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Facebook Events
      /// 
      /// Locales: Base, fr
      static let facebookEvents = Rswift.StringResource(key: "Facebook Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Facebook Photos
      /// 
      /// Locales: Base, fr
      static let facebookPhotos = Rswift.StringResource(key: "Facebook Photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Failed to add photo
      /// 
      /// Locales: Base, fr
      static let failedToAddPhoto = Rswift.StringResource(key: "Failed to add photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Failed to report
      /// 
      /// Locales: Base, fr
      static let failedToUnmatchAndReport = Rswift.StringResource(key: "failedToUnmatchAndReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Failed to unmatch
      /// 
      /// Locales: Base, fr
      static let failedToUnmatch = Rswift.StringResource(key: "failedToUnmatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Find events by name
      /// 
      /// Locales: Base, fr
      static let findEventsByName = Rswift.StringResource(key: "Find events by name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Goes to %@
      /// 
      /// Locales: Base, fr
      static let goesTo = Rswift.StringResource(key: "Goes to %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Goes to %@ (recommended for you)
      /// 
      /// Locales: Base, fr
      static let goesToRecommendedForYou = Rswift.StringResource(key: "Goes to %@ (recommended for you)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Goes to events similar to %@
      /// 
      /// Locales: Base, fr
      static let goesToEventsSimilarTo = Rswift.StringResource(key: "Goes to events similar to %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Interested in %@
      /// 
      /// Locales: Base, fr
      static let interestedIn = Rswift.StringResource(key: "Interested in %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Invited to %@
      /// 
      /// Locales: Base, fr
      static let invitedTo = Rswift.StringResource(key: "Invited to %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Job or school...
      /// 
      /// Locales: Base, fr
      static let profileOccupationPlaceholder = Rswift.StringResource(key: "profileOccupationPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Last seen 
      /// 
      /// Locales: Base, fr
      static let lastSeenLabelText = Rswift.StringResource(key: "lastSeenLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Last seen Just Now 
      /// 
      /// Locales: Base, fr
      static let lastSeenJustNowLabelText = Rswift.StringResource(key: "lastSeenJustNowLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Load earlier messages
      /// 
      /// Locales: Base, fr
      static let loadEarlierMessages = Rswift.StringResource(key: "Load earlier messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Logout
      /// 
      /// Locales: Base, fr
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Looking good, %@!
      /// 
      /// Locales: Base, fr
      static let lookingGood = Rswift.StringResource(key: "Looking good, %@!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Make Plan
      /// 
      /// Locales: Base, fr
      static let makePlan = Rswift.StringResource(key: "Make Plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Make a Plan
      /// 
      /// Locales: Base, fr
      static let makeAPlan = Rswift.StringResource(key: "Make a Plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Making plan...
      /// 
      /// Locales: Base, fr
      static let makingPlan = Rswift.StringResource(key: "Making plan...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Missing permissions
      /// 
      /// Locales: Base, fr
      static let missingPermissionsTitle = Rswift.StringResource(key: "missingPermissionsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: More common event(s)
      /// 
      /// Locales: Base, fr
      static let moreCommonEventS = Rswift.StringResource(key: "More common event(s)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Move and Scale
      /// 
      /// Locales: Base, fr
      static let moveAndScale = Rswift.StringResource(key: "Move and Scale", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Mutual Friends
      /// 
      /// Locales: Base, fr
      static let mutualFriends = Rswift.StringResource(key: "Mutual Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: New match
      /// 
      /// Locales: Base, fr
      static let newMatch = Rswift.StringResource(key: "New match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: New message
      /// 
      /// Locales: Base, fr
      static let newMessage = Rswift.StringResource(key: "New message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: New people
      /// 
      /// Locales: Base, fr
      static let newPeople = Rswift.StringResource(key: "New people", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: No Events Yet
      /// 
      /// Locales: Base, fr
      static let noEventsYet = Rswift.StringResource(key: "No Events Yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: No albums found  Pull to refresh
      /// 
      /// Locales: Base, fr
      static let noAlbumsFoundPullToRefresh = Rswift.StringResource(key: "No albums found\n\nPull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: No internet
      /// 
      /// Locales: Base, fr
      static let noInternet = Rswift.StringResource(key: "No internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: No photos found in this album  Pull to refresh
      /// 
      /// Locales: Base, fr
      static let noPhotosFoundInThisAlbumPullToRefresh = Rswift.StringResource(key: "No photos found in this album\n\nPull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Not now
      /// 
      /// Locales: Base, fr
      static let notNow = Rswift.StringResource(key: "Not now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Offline mode
      /// 
      /// Locales: Base, fr
      static let offlineMode = Rswift.StringResource(key: "Offline mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Ok
      /// 
      /// Locales: Base, fr
      static let missingPermissionsOk = Rswift.StringResource(key: "missingPermissionsOk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Online
      /// 
      /// Locales: Base, fr
      static let online = Rswift.StringResource(key: "Online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Online
      /// 
      /// Locales: Base, fr
      static let onlineLabelText = Rswift.StringResource(key: "onlineLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Only events from the past month or in the future are shown.  Pull to refresh
      /// 
      /// Locales: Base, fr
      static let onlyEventsFromThePastMonthOrInTheFutureAreShownPullToRefresh = Rswift.StringResource(key: "Only events from the past month or in the future are shown.\n\nPull to refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Photo Library
      /// 
      /// Locales: Base, fr
      static let photoLibrary = Rswift.StringResource(key: "Photo Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Photo added!
      /// 
      /// Locales: Base, fr
      static let photoAdded = Rswift.StringResource(key: "Photo added!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base, fr
      static let privacyPolicy = Rswift.StringResource(key: "privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Push notifications
      /// 
      /// Locales: Base, fr
      static let pushNotifications = Rswift.StringResource(key: "Push notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Recommended for you
      /// 
      /// Locales: Base, fr
      static let connectionRecommended = Rswift.StringResource(key: "connectionRecommended", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Remove
      /// 
      /// Locales: Base, fr
      static let remove = Rswift.StringResource(key: "Remove", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Remove Event
      /// 
      /// Locales: Base, fr
      static let removeEvent = Rswift.StringResource(key: "Remove Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Removing event...
      /// 
      /// Locales: Base, fr
      static let removingEvent = Rswift.StringResource(key: "Removing event...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Report
      /// 
      /// Locales: Base, fr
      static let report = Rswift.StringResource(key: "Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Report
      /// 
      /// Locales: Base, fr
      static let unmatchAndReport = Rswift.StringResource(key: "unmatchAndReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Reporting...
      /// 
      /// Locales: Base, fr
      static let unmatchingAndReporting = Rswift.StringResource(key: "unmatchingAndReporting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Search Events
      /// 
      /// Locales: Base, fr
      static let searchEvents = Rswift.StringResource(key: "Search Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Set as Main Photo
      /// 
      /// Locales: Base, fr
      static let setAsMainPhoto = Rswift.StringResource(key: "Set as Main Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Success
      /// 
      /// Locales: Base, fr
      static let success = Rswift.StringResource(key: "Success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Sure you want to delete your account?
      /// 
      /// Locales: Base, fr
      static let sureYouWantToDeleteYourAccount = Rswift.StringResource(key: "Sure you want to delete your account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Sure you want to logout?
      /// 
      /// Locales: Base, fr
      static let sureYouWantToLogout = Rswift.StringResource(key: "Sure you want to logout?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Tell other members why...
      /// 
      /// Locales: Base, fr
      static let tellOtherMembersWhy = Rswift.StringResource(key: "Tell other members why...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base, fr
      static let termsAndConditions = Rswift.StringResource(key: "termsAndConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Today
      /// 
      /// Locales: Base, fr
      static let today = Rswift.StringResource(key: "today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Try Woojo and match with people going to the same events as you!
      /// 
      /// Locales: Base, fr
      static let tryWoojoAndMatchWithPeopleGoingToTheSameEventsAsYou = Rswift.StringResource(key: "Try Woojo and match with people going to the same events as you!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Unknown location
      /// 
      /// Locales: Base, fr
      static let unknownLocation = Rswift.StringResource(key: "Unknown location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Unmatch
      /// 
      /// Locales: Base, fr
      static let unmatch = Rswift.StringResource(key: "Unmatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Unmatched!
      /// 
      /// Locales: Base, fr
      static let unmatched = Rswift.StringResource(key: "unmatched", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Unmatching...
      /// 
      /// Locales: Base, fr
      static let unmatching = Rswift.StringResource(key: "unmatching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Use the + button to add events
      /// 
      /// Locales: Base, fr
      static let clickTheButtonToAddEvents = Rswift.StringResource(key: "Click the + button to add events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Woojo needs to know at least your birthday in order to function properly.
      /// 
      /// Locales: Base, fr
      static let missingPermissionsMessage = Rswift.StringResource(key: "missingPermissionsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Would you like to get push notifications when you match or receive messages?  You can also manage this behavior later from the Settings screen.
      /// 
      /// Locales: Base, fr
      static let wouldYouLikeToGetPushNotificationsWhenYouMatchOrReceiveMessagesYouCanAlsoManageThisBehaviorLaterFromTheSettingsScreen = Rswift.StringResource(key: "Would you like to get push notifications when you match or receive messages?\n\nYou can also manage this behavior later from the Settings screen.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Write a message...
      /// 
      /// Locales: Base, fr
      static let writeAMessage = Rswift.StringResource(key: "Write a message...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Write something about yourself...
      /// 
      /// Locales: Base, fr
      static let profileDescriptionPlaceholder = Rswift.StringResource(key: "profileDescriptionPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Yes, notify me
      /// 
      /// Locales: Base, fr
      static let yesNotifyMe = Rswift.StringResource(key: "Yes, notify me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: Yesterday
      /// 
      /// Locales: Base, fr
      static let yesterday = Rswift.StringResource(key: "yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You don't have any new event on Facebook.
      /// 
      /// Locales: Base, fr
      static let youDonTHaveAnyNewEventOnFacebook = Rswift.StringResource(key: "You don't have any new event on Facebook.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You have a ticket
      /// 
      /// Locales: Base, fr
      static let connectionEventbriteTicket = Rswift.StringResource(key: "connectionEventbriteTicket", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You have new people waiting!
      /// 
      /// Locales: Base, fr
      static let youHaveNewPeopleWaiting = Rswift.StringResource(key: "You have new people waiting!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You have no conversations yet
      /// 
      /// Locales: Base, fr
      static let youHaveNoConversationsYet = Rswift.StringResource(key: "You have no conversations yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You matched with %@!
      /// 
      /// Locales: Base, fr
      static let youMatchedWith = Rswift.StringResource(key: "You matched with %@!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You matched with %d %@ in this event
      /// 
      /// Locales: Base, fr
      static let youMatchedWithDInThisEvent = Rswift.StringResource(key: "You matched with %d %@ in this event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You're all set, %@!
      /// 
      /// Locales: Base, fr
      static let youReAllSet = Rswift.StringResource(key: "You're all set, %@!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You're going
      /// 
      /// Locales: Base, fr
      static let connectionFacebookGoing = Rswift.StringResource(key: "connectionFacebookGoing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You're interested
      /// 
      /// Locales: Base, fr
      static let connectionFacebookInterested = Rswift.StringResource(key: "connectionFacebookInterested", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You're invited
      /// 
      /// Locales: Base, fr
      static let connectionFacebookNotReplied = Rswift.StringResource(key: "connectionFacebookNotReplied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: You're no longer connected to this user
      /// 
      /// Locales: Base, fr
      static let youReNoLongerConnectedToThisUser = Rswift.StringResource(key: "You're no longer connected to this user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: character
      /// 
      /// Locales: Base, fr
      static let character = Rswift.StringResource(key: "character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: characters
      /// 
      /// Locales: Base, fr
      static let characters = Rswift.StringResource(key: "characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: event
      /// 
      /// Locales: Base, fr
      static let event = Rswift.StringResource(key: "event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: events
      /// 
      /// Locales: Base, fr
      static let events = Rswift.StringResource(key: "events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: hrs ago
      /// 
      /// Locales: Base, fr
      static let hrsAgo = Rswift.StringResource(key: "hrsAgo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: mins ago
      /// 
      /// Locales: Base, fr
      static let mins = Rswift.StringResource(key: "mins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: people
      /// 
      /// Locales: Base, fr
      static let people = Rswift.StringResource(key: "people", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: person
      /// 
      /// Locales: Base, fr
      static let person = Rswift.StringResource(key: "person", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: today
      /// 
      /// Locales: Base, fr
      static let todayMsgViewText = Rswift.StringResource(key: "todayMsgViewText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// Base translation: yesterday
      /// 
      /// Locales: Base, fr
      static let yesterdayMsgViewText = Rswift.StringResource(key: "yesterdayMsgViewText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "fr"], comment: nil)
      /// fr translation: Annuler
      /// 
      /// Locales: fr
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fr"], comment: nil)
      
      /// Base translation: %d %@ left
      /// 
      /// Locales: Base, fr
      static func dLeft(_ value1: Int, _ value2: String) -> String {
        return String(format: NSLocalizedString("%d %@ left", bundle: R.hostingBundle, value: "%d %@ left", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: %d going
      /// 
      /// Locales: Base, fr
      static func dGoing(_ value1: Int) -> String {
        return String(format: NSLocalizedString("%d going", bundle: R.hostingBundle, value: "%d going", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: %d invited
      /// 
      /// Locales: Base, fr
      static func dInvited(_ value1: Int) -> String {
        return String(format: NSLocalizedString("%d invited", bundle: R.hostingBundle, value: "%d invited", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: %d maybe
      /// 
      /// Locales: Base, fr
      static func dMaybe(_ value1: Int) -> String {
        return String(format: NSLocalizedString("%d maybe", bundle: R.hostingBundle, value: "%d maybe", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: %d photo%@
      /// 
      /// Locales: Base, fr
      static func dPhoto(_ value1: Int, _ value2: String) -> String {
        return String(format: NSLocalizedString("%d photo%@", bundle: R.hostingBundle, value: "%d photo%@", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: +%d more common %@
      /// 
      /// Locales: Base, fr
      static func dMoreCommon(_ value1: Int, _ value2: String) -> String {
        return String(format: NSLocalizedString("+%d more common %@", bundle: R.hostingBundle, value: "+%d more common %@", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: About %@
      /// 
      /// Locales: Base, fr
      static func about(_ value1: String) -> String {
        return String(format: NSLocalizedString("About %@", bundle: R.hostingBundle, value: "About %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: About %@
      /// 
      /// Locales: Base, fr
      static func peopleDetailsAbout(_ value1: String) -> String {
        return String(format: NSLocalizedString("peopleDetailsAbout", bundle: R.hostingBundle, value: "About %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Add Event
      /// 
      /// Locales: Base, fr
      static func addEvent(_: Void = ()) -> String {
        return NSLocalizedString("Add Event", bundle: R.hostingBundle, value: "Add Event", comment: "")
      }
      
      /// Base translation: Add Photo
      /// 
      /// Locales: Base, fr
      static func addPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Add Photo", bundle: R.hostingBundle, value: "Add Photo", comment: "")
      }
      
      /// Base translation: Adding event...
      /// 
      /// Locales: Base, fr
      static func addingEvent(_: Void = ()) -> String {
        return NSLocalizedString("Adding event...", bundle: R.hostingBundle, value: "Adding event...", comment: "")
      }
      
      /// Base translation: Chats
      /// 
      /// Locales: Base, fr
      static func chats(_: Void = ()) -> String {
        return NSLocalizedString("Chats", bundle: R.hostingBundle, value: "Chats", comment: "")
      }
      
      /// Base translation: Choose a date and a place Discover people with the same plan!
      /// 
      /// Locales: Base, fr
      static func chooseADateAndAPlaceDiscoverPeopleWithTheSamePlan(_: Void = ()) -> String {
        return NSLocalizedString("Choose a date and a place\nDiscover people with the same plan!", bundle: R.hostingBundle, value: "Choose a date and a place\nDiscover people with the same plan!", comment: "")
      }
      
      /// Base translation: Close
      /// 
      /// Locales: Base, fr
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("close", bundle: R.hostingBundle, value: "Close", comment: "")
      }
      
      /// Base translation: Closing chat
      /// 
      /// Locales: Base, fr
      static func closingChat(_: Void = ()) -> String {
        return NSLocalizedString("Closing chat", bundle: R.hostingBundle, value: "Closing chat", comment: "")
      }
      
      /// Base translation: Common Events
      /// 
      /// Locales: Base, fr
      static func commonEvents(_: Void = ()) -> String {
        return NSLocalizedString("Common Events", bundle: R.hostingBundle, value: "Common Events", comment: "")
      }
      
      /// Base translation: Common Interests
      /// 
      /// Locales: Base, fr
      static func commonInterests(_: Void = ()) -> String {
        return NSLocalizedString("Common Interests", bundle: R.hostingBundle, value: "Common Interests", comment: "")
      }
      
      /// Base translation: Confirm report?
      /// 
      /// Locales: Base, fr
      static func confirmUnmatchAndReport(_: Void = ()) -> String {
        return NSLocalizedString("confirmUnmatchAndReport", bundle: R.hostingBundle, value: "Confirm report?", comment: "")
      }
      
      /// Base translation: Confirm unmatch?
      /// 
      /// Locales: Base, fr
      static func confirmUnmatch(_: Void = ()) -> String {
        return NSLocalizedString("confirmUnmatch", bundle: R.hostingBundle, value: "Confirm unmatch?", comment: "")
      }
      
      /// Base translation: Currently unavailable
      /// 
      /// Locales: Base, fr
      static func currentlyUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("Currently unavailable", bundle: R.hostingBundle, value: "Currently unavailable", comment: "")
      }
      
      /// Base translation: Delete
      /// 
      /// Locales: Base, fr
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, value: "Delete", comment: "")
      }
      
      /// Base translation: Delete Account
      /// 
      /// Locales: Base, fr
      static func deleteAccount(_: Void = ()) -> String {
        return NSLocalizedString("Delete Account", bundle: R.hostingBundle, value: "Delete Account", comment: "")
      }
      
      /// Base translation: Discover people in your %d new events!
      /// 
      /// Locales: Base, fr
      static func discoverPeopleInYourDNewEvents(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Discover people in your %d new events!", bundle: R.hostingBundle, value: "Discover people in your %d new events!", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Done!
      /// 
      /// Locales: Base, fr
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", bundle: R.hostingBundle, value: "Done!", comment: "")
      }
      
      /// Base translation: Due to temporary changes in Facebook's privacy policy, your events are inaccessible at this time.  This feature will be re-activated when access is restored.
      /// 
      /// Locales: Base, fr
      static func dueToTemporaryChangesInFacebookSPrivacyPolicyYourEventsAreInaccessibleAtThisTimeThisFeatureWillBeReActivatedWhenAccessIsRestored(_: Void = ()) -> String {
        return NSLocalizedString("Due to temporary changes in Facebook's privacy policy, your events are inaccessible at this time.\n\nThis feature will be re-activated when access is restored.", bundle: R.hostingBundle, value: "Due to temporary changes in Facebook's privacy policy, your events are inaccessible at this time.\n\nThis feature will be re-activated when access is restored.", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base, fr
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Event added!
      /// 
      /// Locales: Base, fr
      static func eventAdded(_: Void = ()) -> String {
        return NSLocalizedString("Event added!", bundle: R.hostingBundle, value: "Event added!", comment: "")
      }
      
      /// Base translation: Event removed!
      /// 
      /// Locales: Base, fr
      static func eventRemoved(_: Void = ()) -> String {
        return NSLocalizedString("Event removed!", bundle: R.hostingBundle, value: "Event removed!", comment: "")
      }
      
      /// Base translation: Eventbrite
      /// 
      /// Locales: Base, fr
      static func eventbrite(_: Void = ()) -> String {
        return NSLocalizedString("eventbrite", bundle: R.hostingBundle, value: "Eventbrite", comment: "")
      }
      
      /// Base translation: Facebook
      /// 
      /// Locales: Base, fr
      static func facebook(_: Void = ()) -> String {
        return NSLocalizedString("Facebook", bundle: R.hostingBundle, value: "Facebook", comment: "")
      }
      
      /// Base translation: Facebook Albums
      /// 
      /// Locales: Base, fr
      static func facebookAlbums(_: Void = ()) -> String {
        return NSLocalizedString("Facebook Albums", bundle: R.hostingBundle, value: "Facebook Albums", comment: "")
      }
      
      /// Base translation: Facebook Events
      /// 
      /// Locales: Base, fr
      static func facebookEvents(_: Void = ()) -> String {
        return NSLocalizedString("Facebook Events", bundle: R.hostingBundle, value: "Facebook Events", comment: "")
      }
      
      /// Base translation: Facebook Photos
      /// 
      /// Locales: Base, fr
      static func facebookPhotos(_: Void = ()) -> String {
        return NSLocalizedString("Facebook Photos", bundle: R.hostingBundle, value: "Facebook Photos", comment: "")
      }
      
      /// Base translation: Failed to add photo
      /// 
      /// Locales: Base, fr
      static func failedToAddPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Failed to add photo", bundle: R.hostingBundle, value: "Failed to add photo", comment: "")
      }
      
      /// Base translation: Failed to report
      /// 
      /// Locales: Base, fr
      static func failedToUnmatchAndReport(_: Void = ()) -> String {
        return NSLocalizedString("failedToUnmatchAndReport", bundle: R.hostingBundle, value: "Failed to report", comment: "")
      }
      
      /// Base translation: Failed to unmatch
      /// 
      /// Locales: Base, fr
      static func failedToUnmatch(_: Void = ()) -> String {
        return NSLocalizedString("failedToUnmatch", bundle: R.hostingBundle, value: "Failed to unmatch", comment: "")
      }
      
      /// Base translation: Find events by name
      /// 
      /// Locales: Base, fr
      static func findEventsByName(_: Void = ()) -> String {
        return NSLocalizedString("Find events by name", bundle: R.hostingBundle, value: "Find events by name", comment: "")
      }
      
      /// Base translation: Goes to %@
      /// 
      /// Locales: Base, fr
      static func goesTo(_ value1: String) -> String {
        return String(format: NSLocalizedString("Goes to %@", bundle: R.hostingBundle, value: "Goes to %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Goes to %@ (recommended for you)
      /// 
      /// Locales: Base, fr
      static func goesToRecommendedForYou(_ value1: String) -> String {
        return String(format: NSLocalizedString("Goes to %@ (recommended for you)", bundle: R.hostingBundle, value: "Goes to %@ (recommended for you)", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Goes to events similar to %@
      /// 
      /// Locales: Base, fr
      static func goesToEventsSimilarTo(_ value1: String) -> String {
        return String(format: NSLocalizedString("Goes to events similar to %@", bundle: R.hostingBundle, value: "Goes to events similar to %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Interested in %@
      /// 
      /// Locales: Base, fr
      static func interestedIn(_ value1: String) -> String {
        return String(format: NSLocalizedString("Interested in %@", bundle: R.hostingBundle, value: "Interested in %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Invited to %@
      /// 
      /// Locales: Base, fr
      static func invitedTo(_ value1: String) -> String {
        return String(format: NSLocalizedString("Invited to %@", bundle: R.hostingBundle, value: "Invited to %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Job or school...
      /// 
      /// Locales: Base, fr
      static func profileOccupationPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("profileOccupationPlaceholder", bundle: R.hostingBundle, value: "Job or school...", comment: "")
      }
      
      /// Base translation: Last seen 
      /// 
      /// Locales: Base, fr
      static func lastSeenLabelText(_: Void = ()) -> String {
        return NSLocalizedString("lastSeenLabelText", bundle: R.hostingBundle, value: "Last seen ", comment: "")
      }
      
      /// Base translation: Last seen Just Now 
      /// 
      /// Locales: Base, fr
      static func lastSeenJustNowLabelText(_: Void = ()) -> String {
        return NSLocalizedString("lastSeenJustNowLabelText", bundle: R.hostingBundle, value: "Last seen Just Now ", comment: "")
      }
      
      /// Base translation: Load earlier messages
      /// 
      /// Locales: Base, fr
      static func loadEarlierMessages(_: Void = ()) -> String {
        return NSLocalizedString("Load earlier messages", bundle: R.hostingBundle, value: "Load earlier messages", comment: "")
      }
      
      /// Base translation: Logout
      /// 
      /// Locales: Base, fr
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("Logout", bundle: R.hostingBundle, value: "Logout", comment: "")
      }
      
      /// Base translation: Looking good, %@!
      /// 
      /// Locales: Base, fr
      static func lookingGood(_ value1: String) -> String {
        return String(format: NSLocalizedString("Looking good, %@!", bundle: R.hostingBundle, value: "Looking good, %@!", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Make Plan
      /// 
      /// Locales: Base, fr
      static func makePlan(_: Void = ()) -> String {
        return NSLocalizedString("Make Plan", bundle: R.hostingBundle, value: "Make Plan", comment: "")
      }
      
      /// Base translation: Make a Plan
      /// 
      /// Locales: Base, fr
      static func makeAPlan(_: Void = ()) -> String {
        return NSLocalizedString("Make a Plan", bundle: R.hostingBundle, value: "Make a Plan", comment: "")
      }
      
      /// Base translation: Making plan...
      /// 
      /// Locales: Base, fr
      static func makingPlan(_: Void = ()) -> String {
        return NSLocalizedString("Making plan...", bundle: R.hostingBundle, value: "Making plan...", comment: "")
      }
      
      /// Base translation: Missing permissions
      /// 
      /// Locales: Base, fr
      static func missingPermissionsTitle(_: Void = ()) -> String {
        return NSLocalizedString("missingPermissionsTitle", bundle: R.hostingBundle, value: "Missing permissions", comment: "")
      }
      
      /// Base translation: More common event(s)
      /// 
      /// Locales: Base, fr
      static func moreCommonEventS(_: Void = ()) -> String {
        return NSLocalizedString("More common event(s)", bundle: R.hostingBundle, value: "More common event(s)", comment: "")
      }
      
      /// Base translation: Move and Scale
      /// 
      /// Locales: Base, fr
      static func moveAndScale(_: Void = ()) -> String {
        return NSLocalizedString("Move and Scale", bundle: R.hostingBundle, value: "Move and Scale", comment: "")
      }
      
      /// Base translation: Mutual Friends
      /// 
      /// Locales: Base, fr
      static func mutualFriends(_: Void = ()) -> String {
        return NSLocalizedString("Mutual Friends", bundle: R.hostingBundle, value: "Mutual Friends", comment: "")
      }
      
      /// Base translation: New match
      /// 
      /// Locales: Base, fr
      static func newMatch(_: Void = ()) -> String {
        return NSLocalizedString("New match", bundle: R.hostingBundle, value: "New match", comment: "")
      }
      
      /// Base translation: New message
      /// 
      /// Locales: Base, fr
      static func newMessage(_: Void = ()) -> String {
        return NSLocalizedString("New message", bundle: R.hostingBundle, value: "New message", comment: "")
      }
      
      /// Base translation: New people
      /// 
      /// Locales: Base, fr
      static func newPeople(_: Void = ()) -> String {
        return NSLocalizedString("New people", bundle: R.hostingBundle, value: "New people", comment: "")
      }
      
      /// Base translation: No Events Yet
      /// 
      /// Locales: Base, fr
      static func noEventsYet(_: Void = ()) -> String {
        return NSLocalizedString("No Events Yet", bundle: R.hostingBundle, value: "No Events Yet", comment: "")
      }
      
      /// Base translation: No albums found  Pull to refresh
      /// 
      /// Locales: Base, fr
      static func noAlbumsFoundPullToRefresh(_: Void = ()) -> String {
        return NSLocalizedString("No albums found\n\nPull to refresh", bundle: R.hostingBundle, value: "No albums found\n\nPull to refresh", comment: "")
      }
      
      /// Base translation: No internet
      /// 
      /// Locales: Base, fr
      static func noInternet(_: Void = ()) -> String {
        return NSLocalizedString("No internet", bundle: R.hostingBundle, value: "No internet", comment: "")
      }
      
      /// Base translation: No photos found in this album  Pull to refresh
      /// 
      /// Locales: Base, fr
      static func noPhotosFoundInThisAlbumPullToRefresh(_: Void = ()) -> String {
        return NSLocalizedString("No photos found in this album\n\nPull to refresh", bundle: R.hostingBundle, value: "No photos found in this album\n\nPull to refresh", comment: "")
      }
      
      /// Base translation: Not now
      /// 
      /// Locales: Base, fr
      static func notNow(_: Void = ()) -> String {
        return NSLocalizedString("Not now", bundle: R.hostingBundle, value: "Not now", comment: "")
      }
      
      /// Base translation: Offline mode
      /// 
      /// Locales: Base, fr
      static func offlineMode(_: Void = ()) -> String {
        return NSLocalizedString("Offline mode", bundle: R.hostingBundle, value: "Offline mode", comment: "")
      }
      
      /// Base translation: Ok
      /// 
      /// Locales: Base, fr
      static func missingPermissionsOk(_: Void = ()) -> String {
        return NSLocalizedString("missingPermissionsOk", bundle: R.hostingBundle, value: "Ok", comment: "")
      }
      
      /// Base translation: Online
      /// 
      /// Locales: Base, fr
      static func online(_: Void = ()) -> String {
        return NSLocalizedString("Online", bundle: R.hostingBundle, value: "Online", comment: "")
      }
      
      /// Base translation: Online
      /// 
      /// Locales: Base, fr
      static func onlineLabelText(_: Void = ()) -> String {
        return NSLocalizedString("onlineLabelText", bundle: R.hostingBundle, value: "Online", comment: "")
      }
      
      /// Base translation: Only events from the past month or in the future are shown.  Pull to refresh
      /// 
      /// Locales: Base, fr
      static func onlyEventsFromThePastMonthOrInTheFutureAreShownPullToRefresh(_: Void = ()) -> String {
        return NSLocalizedString("Only events from the past month or in the future are shown.\n\nPull to refresh", bundle: R.hostingBundle, value: "Only events from the past month or in the future are shown.\n\nPull to refresh", comment: "")
      }
      
      /// Base translation: Photo Library
      /// 
      /// Locales: Base, fr
      static func photoLibrary(_: Void = ()) -> String {
        return NSLocalizedString("Photo Library", bundle: R.hostingBundle, value: "Photo Library", comment: "")
      }
      
      /// Base translation: Photo added!
      /// 
      /// Locales: Base, fr
      static func photoAdded(_: Void = ()) -> String {
        return NSLocalizedString("Photo added!", bundle: R.hostingBundle, value: "Photo added!", comment: "")
      }
      
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base, fr
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("privacyPolicy", bundle: R.hostingBundle, value: "Privacy Policy", comment: "")
      }
      
      /// Base translation: Push notifications
      /// 
      /// Locales: Base, fr
      static func pushNotifications(_: Void = ()) -> String {
        return NSLocalizedString("Push notifications", bundle: R.hostingBundle, value: "Push notifications", comment: "")
      }
      
      /// Base translation: Recommended for you
      /// 
      /// Locales: Base, fr
      static func connectionRecommended(_: Void = ()) -> String {
        return NSLocalizedString("connectionRecommended", bundle: R.hostingBundle, value: "Recommended for you", comment: "")
      }
      
      /// Base translation: Remove
      /// 
      /// Locales: Base, fr
      static func remove(_: Void = ()) -> String {
        return NSLocalizedString("Remove", bundle: R.hostingBundle, value: "Remove", comment: "")
      }
      
      /// Base translation: Remove Event
      /// 
      /// Locales: Base, fr
      static func removeEvent(_: Void = ()) -> String {
        return NSLocalizedString("Remove Event", bundle: R.hostingBundle, value: "Remove Event", comment: "")
      }
      
      /// Base translation: Removing event...
      /// 
      /// Locales: Base, fr
      static func removingEvent(_: Void = ()) -> String {
        return NSLocalizedString("Removing event...", bundle: R.hostingBundle, value: "Removing event...", comment: "")
      }
      
      /// Base translation: Report
      /// 
      /// Locales: Base, fr
      static func report(_: Void = ()) -> String {
        return NSLocalizedString("Report", bundle: R.hostingBundle, value: "Report", comment: "")
      }
      
      /// Base translation: Report
      /// 
      /// Locales: Base, fr
      static func unmatchAndReport(_: Void = ()) -> String {
        return NSLocalizedString("unmatchAndReport", bundle: R.hostingBundle, value: "Report", comment: "")
      }
      
      /// Base translation: Reporting...
      /// 
      /// Locales: Base, fr
      static func unmatchingAndReporting(_: Void = ()) -> String {
        return NSLocalizedString("unmatchingAndReporting", bundle: R.hostingBundle, value: "Reporting...", comment: "")
      }
      
      /// Base translation: Search Events
      /// 
      /// Locales: Base, fr
      static func searchEvents(_: Void = ()) -> String {
        return NSLocalizedString("Search Events", bundle: R.hostingBundle, value: "Search Events", comment: "")
      }
      
      /// Base translation: Set as Main Photo
      /// 
      /// Locales: Base, fr
      static func setAsMainPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Set as Main Photo", bundle: R.hostingBundle, value: "Set as Main Photo", comment: "")
      }
      
      /// Base translation: Success
      /// 
      /// Locales: Base, fr
      static func success(_: Void = ()) -> String {
        return NSLocalizedString("Success", bundle: R.hostingBundle, value: "Success", comment: "")
      }
      
      /// Base translation: Sure you want to delete your account?
      /// 
      /// Locales: Base, fr
      static func sureYouWantToDeleteYourAccount(_: Void = ()) -> String {
        return NSLocalizedString("Sure you want to delete your account?", bundle: R.hostingBundle, value: "Sure you want to delete your account?", comment: "")
      }
      
      /// Base translation: Sure you want to logout?
      /// 
      /// Locales: Base, fr
      static func sureYouWantToLogout(_: Void = ()) -> String {
        return NSLocalizedString("Sure you want to logout?", bundle: R.hostingBundle, value: "Sure you want to logout?", comment: "")
      }
      
      /// Base translation: Tell other members why...
      /// 
      /// Locales: Base, fr
      static func tellOtherMembersWhy(_: Void = ()) -> String {
        return NSLocalizedString("Tell other members why...", bundle: R.hostingBundle, value: "Tell other members why...", comment: "")
      }
      
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base, fr
      static func termsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("termsAndConditions", bundle: R.hostingBundle, value: "Terms & Conditions", comment: "")
      }
      
      /// Base translation: Today
      /// 
      /// Locales: Base, fr
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("today", bundle: R.hostingBundle, value: "Today", comment: "")
      }
      
      /// Base translation: Try Woojo and match with people going to the same events as you!
      /// 
      /// Locales: Base, fr
      static func tryWoojoAndMatchWithPeopleGoingToTheSameEventsAsYou(_: Void = ()) -> String {
        return NSLocalizedString("Try Woojo and match with people going to the same events as you!", bundle: R.hostingBundle, value: "Try Woojo and match with people going to the same events as you!", comment: "")
      }
      
      /// Base translation: Unknown location
      /// 
      /// Locales: Base, fr
      static func unknownLocation(_: Void = ()) -> String {
        return NSLocalizedString("Unknown location", bundle: R.hostingBundle, value: "Unknown location", comment: "")
      }
      
      /// Base translation: Unmatch
      /// 
      /// Locales: Base, fr
      static func unmatch(_: Void = ()) -> String {
        return NSLocalizedString("Unmatch", bundle: R.hostingBundle, value: "Unmatch", comment: "")
      }
      
      /// Base translation: Unmatched!
      /// 
      /// Locales: Base, fr
      static func unmatched(_: Void = ()) -> String {
        return NSLocalizedString("unmatched", bundle: R.hostingBundle, value: "Unmatched!", comment: "")
      }
      
      /// Base translation: Unmatching...
      /// 
      /// Locales: Base, fr
      static func unmatching(_: Void = ()) -> String {
        return NSLocalizedString("unmatching", bundle: R.hostingBundle, value: "Unmatching...", comment: "")
      }
      
      /// Base translation: Use the + button to add events
      /// 
      /// Locales: Base, fr
      static func clickTheButtonToAddEvents(_: Void = ()) -> String {
        return NSLocalizedString("Click the + button to add events", bundle: R.hostingBundle, value: "Use the + button to add events", comment: "")
      }
      
      /// Base translation: Woojo needs to know at least your birthday in order to function properly.
      /// 
      /// Locales: Base, fr
      static func missingPermissionsMessage(_: Void = ()) -> String {
        return NSLocalizedString("missingPermissionsMessage", bundle: R.hostingBundle, value: "Woojo needs to know at least your birthday in order to function properly.", comment: "")
      }
      
      /// Base translation: Would you like to get push notifications when you match or receive messages?  You can also manage this behavior later from the Settings screen.
      /// 
      /// Locales: Base, fr
      static func wouldYouLikeToGetPushNotificationsWhenYouMatchOrReceiveMessagesYouCanAlsoManageThisBehaviorLaterFromTheSettingsScreen(_: Void = ()) -> String {
        return NSLocalizedString("Would you like to get push notifications when you match or receive messages?\n\nYou can also manage this behavior later from the Settings screen.", bundle: R.hostingBundle, value: "Would you like to get push notifications when you match or receive messages?\n\nYou can also manage this behavior later from the Settings screen.", comment: "")
      }
      
      /// Base translation: Write a message...
      /// 
      /// Locales: Base, fr
      static func writeAMessage(_: Void = ()) -> String {
        return NSLocalizedString("Write a message...", bundle: R.hostingBundle, value: "Write a message...", comment: "")
      }
      
      /// Base translation: Write something about yourself...
      /// 
      /// Locales: Base, fr
      static func profileDescriptionPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("profileDescriptionPlaceholder", bundle: R.hostingBundle, value: "Write something about yourself...", comment: "")
      }
      
      /// Base translation: Yes, notify me
      /// 
      /// Locales: Base, fr
      static func yesNotifyMe(_: Void = ()) -> String {
        return NSLocalizedString("Yes, notify me", bundle: R.hostingBundle, value: "Yes, notify me", comment: "")
      }
      
      /// Base translation: Yesterday
      /// 
      /// Locales: Base, fr
      static func yesterday(_: Void = ()) -> String {
        return NSLocalizedString("yesterday", bundle: R.hostingBundle, value: "Yesterday", comment: "")
      }
      
      /// Base translation: You don't have any new event on Facebook.
      /// 
      /// Locales: Base, fr
      static func youDonTHaveAnyNewEventOnFacebook(_: Void = ()) -> String {
        return NSLocalizedString("You don't have any new event on Facebook.", bundle: R.hostingBundle, value: "You don't have any new event on Facebook.", comment: "")
      }
      
      /// Base translation: You have a ticket
      /// 
      /// Locales: Base, fr
      static func connectionEventbriteTicket(_: Void = ()) -> String {
        return NSLocalizedString("connectionEventbriteTicket", bundle: R.hostingBundle, value: "You have a ticket", comment: "")
      }
      
      /// Base translation: You have new people waiting!
      /// 
      /// Locales: Base, fr
      static func youHaveNewPeopleWaiting(_: Void = ()) -> String {
        return NSLocalizedString("You have new people waiting!", bundle: R.hostingBundle, value: "You have new people waiting!", comment: "")
      }
      
      /// Base translation: You have no conversations yet
      /// 
      /// Locales: Base, fr
      static func youHaveNoConversationsYet(_: Void = ()) -> String {
        return NSLocalizedString("You have no conversations yet", bundle: R.hostingBundle, value: "You have no conversations yet", comment: "")
      }
      
      /// Base translation: You matched with %@!
      /// 
      /// Locales: Base, fr
      static func youMatchedWith(_ value1: String) -> String {
        return String(format: NSLocalizedString("You matched with %@!", bundle: R.hostingBundle, value: "You matched with %@!", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: You matched with %d %@ in this event
      /// 
      /// Locales: Base, fr
      static func youMatchedWithDInThisEvent(_ value1: Int, _ value2: String) -> String {
        return String(format: NSLocalizedString("You matched with %d %@ in this event", bundle: R.hostingBundle, value: "You matched with %d %@ in this event", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: You're all set, %@!
      /// 
      /// Locales: Base, fr
      static func youReAllSet(_ value1: String) -> String {
        return String(format: NSLocalizedString("You're all set, %@!", bundle: R.hostingBundle, value: "You're all set, %@!", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: You're going
      /// 
      /// Locales: Base, fr
      static func connectionFacebookGoing(_: Void = ()) -> String {
        return NSLocalizedString("connectionFacebookGoing", bundle: R.hostingBundle, value: "You're going", comment: "")
      }
      
      /// Base translation: You're interested
      /// 
      /// Locales: Base, fr
      static func connectionFacebookInterested(_: Void = ()) -> String {
        return NSLocalizedString("connectionFacebookInterested", bundle: R.hostingBundle, value: "You're interested", comment: "")
      }
      
      /// Base translation: You're invited
      /// 
      /// Locales: Base, fr
      static func connectionFacebookNotReplied(_: Void = ()) -> String {
        return NSLocalizedString("connectionFacebookNotReplied", bundle: R.hostingBundle, value: "You're invited", comment: "")
      }
      
      /// Base translation: You're no longer connected to this user
      /// 
      /// Locales: Base, fr
      static func youReNoLongerConnectedToThisUser(_: Void = ()) -> String {
        return NSLocalizedString("You're no longer connected to this user", bundle: R.hostingBundle, value: "You're no longer connected to this user", comment: "")
      }
      
      /// Base translation: character
      /// 
      /// Locales: Base, fr
      static func character(_: Void = ()) -> String {
        return NSLocalizedString("character", bundle: R.hostingBundle, value: "character", comment: "")
      }
      
      /// Base translation: characters
      /// 
      /// Locales: Base, fr
      static func characters(_: Void = ()) -> String {
        return NSLocalizedString("characters", bundle: R.hostingBundle, value: "characters", comment: "")
      }
      
      /// Base translation: event
      /// 
      /// Locales: Base, fr
      static func event(_: Void = ()) -> String {
        return NSLocalizedString("event", bundle: R.hostingBundle, value: "event", comment: "")
      }
      
      /// Base translation: events
      /// 
      /// Locales: Base, fr
      static func events(_: Void = ()) -> String {
        return NSLocalizedString("events", bundle: R.hostingBundle, value: "events", comment: "")
      }
      
      /// Base translation: hrs ago
      /// 
      /// Locales: Base, fr
      static func hrsAgo(_: Void = ()) -> String {
        return NSLocalizedString("hrsAgo", bundle: R.hostingBundle, value: "hrs ago", comment: "")
      }
      
      /// Base translation: mins ago
      /// 
      /// Locales: Base, fr
      static func mins(_: Void = ()) -> String {
        return NSLocalizedString("mins", bundle: R.hostingBundle, value: "mins ago", comment: "")
      }
      
      /// Base translation: people
      /// 
      /// Locales: Base, fr
      static func people(_: Void = ()) -> String {
        return NSLocalizedString("people", bundle: R.hostingBundle, value: "people", comment: "")
      }
      
      /// Base translation: person
      /// 
      /// Locales: Base, fr
      static func person(_: Void = ()) -> String {
        return NSLocalizedString("person", bundle: R.hostingBundle, value: "person", comment: "")
      }
      
      /// Base translation: today
      /// 
      /// Locales: Base, fr
      static func todayMsgViewText(_: Void = ()) -> String {
        return NSLocalizedString("todayMsgViewText", bundle: R.hostingBundle, value: "today", comment: "")
      }
      
      /// Base translation: yesterday
      /// 
      /// Locales: Base, fr
      static func yesterdayMsgViewText(_: Void = ()) -> String {
        return NSLocalizedString("yesterdayMsgViewText", bundle: R.hostingBundle, value: "yesterday", comment: "")
      }
      
      /// fr translation: Annuler
      /// 
      /// Locales: fr
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 124 localization keys.
    struct main {
      /// en translation: 100
      /// 
      /// Locales: en, fr
      static let wMdMfAXaText = Rswift.StringResource(key: "WMd-Mf-aXa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 1234
      /// 
      /// Locales: en, fr
      static let oWsAP9BDPlaceholder = Rswift.StringResource(key: "OWs-aP-9BD.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 12345 characters left
      /// 
      /// Locales: en, fr
      static let jFyEjGbrFooterTitle = Rswift.StringResource(key: "jFy-Ej-gbr.footerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 14:14
      /// 
      /// Locales: en, fr
      static let gj6O3BKIText = Rswift.StringResource(key: "GJ6-O3-bKI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 15:25
      /// 
      /// Locales: en, fr
      static let sdIGs1oxText = Rswift.StringResource(key: "SdI-Gs-1ox.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 16:05
      /// 
      /// Locales: en, fr
      static let fiUsQwZText = Rswift.StringResource(key: "7fi-us-QwZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: 18
      /// 
      /// Locales: en, fr
      static let e4nKtXGXText = Rswift.StringResource(key: "e4n-Kt-XGX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, fr
      static let jFyEjGbrHeaderTitle = Rswift.StringResource(key: "jFy-Ej-gbr.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, fr
      static let lmASI9y1Title = Rswift.StringResource(key: "lmA-SI-9y1.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About Web
      /// 
      /// Locales: en, fr
      static let f8IHcQWCTitle = Rswift.StringResource(key: "f8I-Hc-QWC.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: About Woojo
      /// 
      /// Locales: en, fr
      static let zvlTmPqVText = Rswift.StringResource(key: "ZVL-Tm-PqV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Add Events
      /// 
      /// Locales: en, fr
      static let hcK4sVgHTitle = Rswift.StringResource(key: "hcK-4s-VgH.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Age
      /// 
      /// Locales: en, fr
      static let ctzIOZb0HeaderTitle = Rswift.StringResource(key: "Ctz-iO-zb0.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Albums
      /// 
      /// Locales: en, fr
      static let cmndqYnzTitle = Rswift.StringResource(key: "CMN-DQ-ynz.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, fr
      static let sr9BlS56SegmentTitles2 = Rswift.StringResource(key: "sr9-Bl-S56.segmentTitles[2]", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: BCN - Barcelona
      /// 
      /// Locales: en, fr
      static let dCfQzB9sText = Rswift.StringResource(key: "dCf-Qz-b9s.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Based on your tastes.
      /// 
      /// Locales: en, fr
      static let jwS5H1LText = Rswift.StringResource(key: "8jw-s5-H1L.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Button
      /// 
      /// Locales: en
      static let dAuIKCaLNormalTitle = Rswift.StringResource(key: "DAu-iK-CaL.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Button
      /// 
      /// Locales: en, fr
      static let eEvCHOToNormalTitle = Rswift.StringResource(key: "EEv-cH-oTo.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Button
      /// 
      /// Locales: en, fr
      static let ycDU293NormalTitle = Rswift.StringResource(key: "0yc-dU-293.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: CDG - Paris
      /// 
      /// Locales: en, fr
      static let r9GvSfWText = Rswift.StringResource(key: "2r9-Gv-SfW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, fr
      static let yN8HoCI5Title = Rswift.StringResource(key: "yN8-Ho-cI5.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Candidates
      /// 
      /// Locales: en, fr
      static let vc7JZMOBTitle = Rswift.StringResource(key: "Vc7-JZ-mOB.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Change Place
      /// 
      /// Locales: en, fr
      static let wklUzUs3NormalTitle = Rswift.StringResource(key: "Wkl-Uz-us3.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Chats
      /// 
      /// Locales: en, fr
      static let zDqS1ZScTitle = Rswift.StringResource(key: "zDq-s1-zSc.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Choose a date and a place
      /// 
      /// Locales: en, fr
      static let xiHsIyqText = Rswift.StringResource(key: "1XI-hs-iyq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Contact the Woojo Team
      /// 
      /// Locales: en, fr
      static let ciQfXvpText = Rswift.StringResource(key: "7Ci-Qf-Xvp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Couldn't find an event?
      /// 
      /// Locales: en, fr
      static let rmsI7MQlText = Rswift.StringResource(key: "Rms-I7-mQl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Create Group
      /// 
      /// Locales: en, fr
      static let z26MtYNINormalTitle = Rswift.StringResource(key: "z26-mt-YNI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Delete Account
      /// 
      /// Locales: en, fr
      static let dnqidru8NormalTitle = Rswift.StringResource(key: "DNQ-iD-RU8.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Discover awesome people!
      /// 
      /// Locales: en, fr
      static let oznQhDuIText = Rswift.StringResource(key: "Ozn-qh-DuI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Discover great events and people.
      /// 
      /// Locales: en, fr
      static let xrBvE3NText = Rswift.StringResource(key: "2XR-Bv-E3N.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Discover people to meet there!
      /// 
      /// Locales: en, fr
      static let qJeSq77uText = Rswift.StringResource(key: "QJe-sq-77u.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Drag and drop to order, tap for options
      /// 
      /// Locales: en, fr
      static let qMaJ1Q3lFooterTitle = Rswift.StringResource(key: "QMa-J1-q3l.footerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enabled
      /// 
      /// Locales: en, fr
      static let jOFYtEwCText = Rswift.StringResource(key: "jOF-Yt-EwC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Enter your flight details
      /// 
      /// Locales: en, fr
      static let zL2CSKvyText = Rswift.StringResource(key: "zL2-CS-kvy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Event
      /// 
      /// Locales: en, fr
      static let cRnZFBckTitle = Rswift.StringResource(key: "cRn-ZF-Bck.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Event sources
      /// 
      /// Locales: en, fr
      static let ju2L5YbVHeaderTitle = Rswift.StringResource(key: "Ju2-L5-YbV.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Eventbrite
      /// 
      /// Locales: en
      static let iND9bRqHTitle = Rswift.StringResource(key: "iND-9b-RqH.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static let i4ICGSEOText = Rswift.StringResource(key: "i4I-cG-sEO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static let kfs9qKLBTitle = Rswift.StringResource(key: "kfs-9q-KLB.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static let nqlWVYRnTitle = Rswift.StringResource(key: "nql-WV-yRn.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Flight number
      /// 
      /// Locales: en, fr
      static let as0XJH2QText = Rswift.StringResource(key: "as0-xJ-h2Q.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Flying soon?
      /// 
      /// Locales: en, fr
      static let zTkNxD9jText = Rswift.StringResource(key: "ZTk-Nx-d9j.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gender
      /// 
      /// Locales: en, fr
      static let jpBnPSjHeaderTitle = Rswift.StringResource(key: "6jp-bn-pSj.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Get notified even when outside the app
      /// 
      /// Locales: en, fr
      static let nHBDZVjaFooterTitle = Rswift.StringResource(key: "nHB-DZ-vja.footerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Help grow the community
      /// 
      /// Locales: en, fr
      static let aAf6WVyRText = Rswift.StringResource(key: "AAf-6W-VyR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Ignore
      /// 
      /// Locales: en, fr
      static let v8wFrT25NormalTitle = Rswift.StringResource(key: "V8w-Fr-t25.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Image Label 
      /// 
      /// Locales: en, fr
      static let o6ADG8EZText = Rswift.StringResource(key: "o6A-dG-8EZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Item
      /// 
      /// Locales: en, fr
      static let aeBQUOFDTitle = Rswift.StringResource(key: "AeB-qU-OFD.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: L
      /// 
      /// Locales: en, fr
      static let urmAmUl4Text = Rswift.StringResource(key: "urm-am-ul4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let bprjBpText = Rswift.StringResource(key: "38B-PR-JBp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let ga6QQLOSText = Rswift.StringResource(key: "Ga6-qQ-LOS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let gnz7fXmwText = Rswift.StringResource(key: "Gnz-7f-xmw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let jXyU4CRFText = Rswift.StringResource(key: "JXy-u4-CRF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let miieodReText = Rswift.StringResource(key: "MII-EO-dRe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let srPSrTSRText = Rswift.StringResource(key: "SrP-sr-tSR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let umgX8HXYText = Rswift.StringResource(key: "umg-X8-hXY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let vuff4HerText = Rswift.StringResource(key: "VUF-F4-Her.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let wZ7QPDoCText = Rswift.StringResource(key: "wZ7-qP-doC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let wnpYwG7LText = Rswift.StringResource(key: "wnp-yw-g7L.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let wq2RuAuXText = Rswift.StringResource(key: "wq2-ru-auX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static let ynd2mITkText = Rswift.StringResource(key: "ynd-2m-iTk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Load Earlier Messages
      /// 
      /// Locales: en, fr
      static let hR4J9MNormalTitle = Rswift.StringResource(key: "58h-r4-J9M.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, fr
      static let iaJWMDCgNormalTitle = Rswift.StringResource(key: "IaJ-wM-dCg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      /// 
      /// Locales: en, fr
      static let skxzjLzText = Rswift.StringResource(key: "3SK-xZ-JLz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: MMessageLabel
      /// 
      /// Locales: en, fr
      static let jXeLxOQFText = Rswift.StringResource(key: "JXe-lx-oQF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Make Plan!
      /// 
      /// Locales: en, fr
      static let vF7ePIfNormalTitle = Rswift.StringResource(key: "5vF-7e-PIf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Manage Events Filter or Preferences
      /// 
      /// Locales: en, fr
      static let hVPO1FRjText = Rswift.StringResource(key: "hVP-o1-fRj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Meet at the airport or on the plane!
      /// 
      /// Locales: en, fr
      static let bNuCdYVZText = Rswift.StringResource(key: "bNu-cd-yVZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Meet people on the go
      /// 
      /// Locales: en, fr
      static let gBDJ42aTText = Rswift.StringResource(key: "gBD-j4-2aT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Men
      /// 
      /// Locales: en, fr
      static let sr9BlS56SegmentTitles1 = Rswift.StringResource(key: "sr9-Bl-S56.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Muserlabel
      /// 
      /// Locales: en, fr
      static let xMGN4BBText = Rswift.StringResource(key: "9xM-gN-4BB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Events
      /// 
      /// Locales: en, fr
      static let aG4IlNNEText = Rswift.StringResource(key: "aG4-Il-NNE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Events
      /// 
      /// Locales: en, fr
      static let zkYBbTitle = Rswift.StringResource(key: "748-zk-yBb.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Facebook events
      /// 
      /// Locales: en, fr
      static let gvlFMNM7Text = Rswift.StringResource(key: "gvl-FM-nM7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Matches
      /// 
      /// Locales: en, fr
      static let iB6YQU39Text = Rswift.StringResource(key: "iB6-YQ-U39.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New Messages
      /// 
      /// Locales: en, fr
      static let nEInQfMText = Rswift.StringResource(key: "9nE-in-qfM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: New People
      /// 
      /// Locales: en, fr
      static let pf7ESBhpText = Rswift.StringResource(key: "PF7-ES-bhp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, fr
      static let gOo0sPHMTitle = Rswift.StringResource(key: "gOo-0s-PHM.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, fr
      static let xCRE58SpText = Rswift.StringResource(key: "xCR-E5-8Sp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notify me of
      /// 
      /// Locales: en, fr
      static let ptbJp8pBHeaderTitle = Rswift.StringResource(key: "Ptb-jp-8pB.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Occupation
      /// 
      /// Locales: en, fr
      static let dLkCx4GYHeaderTitle = Rswift.StringResource(key: "DLk-cx-4GY.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Photos
      /// 
      /// Locales: en, fr
      static let dxmYh9hhTitle = Rswift.StringResource(key: "DXM-yh-9hh.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Photos
      /// 
      /// Locales: en, fr
      static let qMaJ1Q3lHeaderTitle = Rswift.StringResource(key: "QMa-J1-q3l.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static let gynMcUmoTitle = Rswift.StringResource(key: "gyn-Mc-umo.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static let ku7SSNN9Title = Rswift.StringResource(key: "Ku7-SS-nN9.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static let vYbUP1h4Text = Rswift.StringResource(key: "VYb-UP-1h4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, fr
      static let nqPHh0VPText = Rswift.StringResource(key: "nqP-Hh-0VP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, fr
      static let fzjIoMZ0Title = Rswift.StringResource(key: "fzj-io-MZ0.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, fr
      static let oyC91BHXText = Rswift.StringResource(key: "OyC-91-bHX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Push notifications
      /// 
      /// Locales: en, fr
      static let nHBDZVjaHeaderTitle = Rswift.StringResource(key: "nHB-DZ-vja.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Review
      /// 
      /// Locales: en, fr
      static let d3PTsBHyNormalTitle = Rswift.StringResource(key: "d3P-ts-bHy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Save Flight
      /// 
      /// Locales: en, fr
      static let daRLOGcfNormalTitle = Rswift.StringResource(key: "DaR-lO-Gcf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Say something about yourself...
      /// 
      /// Locales: en, fr
      static let jw2MPUwZText = Rswift.StringResource(key: "JW2-MP-UwZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, fr
      static let eYNK0M5FNormalTitle = Rswift.StringResource(key: "eYN-K0-m5F.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, fr
      static let va2SrF53Title = Rswift.StringResource(key: "Va2-Sr-F53.title", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Share Woojo!
      /// 
      /// Locales: en, fr
      static let pJaWc77DNormalTitle = Rswift.StringResource(key: "pJa-Wc-77D.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Share Woojo!
      /// 
      /// Locales: en, fr
      static let u4UEGYDKNormalTitle = Rswift.StringResource(key: "U4U-EG-yDK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tap the logo to integrate
      /// 
      /// Locales: en, fr
      static let xYzKdH5PText = Rswift.StringResource(key: "xYz-kd-h5P.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tap to add or remove from your filter.
      /// 
      /// Locales: en, fr
      static let cY6SSCaeText = Rswift.StringResource(key: "cY6-SS-cae.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tap to add or remove from your filter.
      /// 
      /// Locales: en, fr
      static let icjAgText = Rswift.StringResource(key: "873-IC-JAg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tap to add to your filter.
      /// 
      /// Locales: en, fr
      static let s8oXcMhkText = Rswift.StringResource(key: "s8o-Xc-mhk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tap to add to your filter.
      /// 
      /// Locales: en, fr
      static let sbQbFMAText = Rswift.StringResource(key: "8Sb-Qb-fMA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Tell us your plan
      /// 
      /// Locales: en, fr
      static let gH7Er6U3Text = Rswift.StringResource(key: "gH7-Er-6U3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en, fr
      static let m8aB0EBMText = Rswift.StringResource(key: "M8a-b0-eBM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: These are recommended events
      /// 
      /// Locales: en, fr
      static let swlFFG5kText = Rswift.StringResource(key: "swl-FF-G5k.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: These are your Eventbrite events
      /// 
      /// Locales: en, fr
      static let oNaALHcTText = Rswift.StringResource(key: "ONa-aL-hcT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: These are your Facebook events
      /// 
      /// Locales: en, fr
      static let lvjAZMNcText = Rswift.StringResource(key: "lvj-AZ-MNc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: These are your events
      /// 
      /// Locales: en, fr
      static let b2XBwF6NText = Rswift.StringResource(key: "b2X-bw-F6N.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Those in your filter have a green checkmark.
      /// 
      /// Locales: en, fr
      static let dYBHGUVGText = Rswift.StringResource(key: "dYB-hG-UVG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Those in your filter have a green checkmark.
      /// 
      /// Locales: en, fr
      static let ltQIxUj7Text = Rswift.StringResource(key: "LtQ-Ix-Uj7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: To activate an event, tap on it's image
      /// 
      /// Locales: en, fr
      static let gF4WT55LText = Rswift.StringResource(key: "gF4-wT-55L.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: To see the description, tap on the details
      /// 
      /// Locales: en, fr
      static let s7SYNdText = Rswift.StringResource(key: "23S-7S-YNd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: WW
      /// 
      /// Locales: en, fr
      static let ajQu1uPText = Rswift.StringResource(key: "6AJ-qu-1uP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Wanna see more people?
      /// 
      /// Locales: en, fr
      static let qC8B4GVsText = Rswift.StringResource(key: "qC8-B4-GVs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Women
      /// 
      /// Locales: en, fr
      static let sr9BlS56SegmentTitles0 = Rswift.StringResource(key: "sr9-Bl-S56.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Woojo for iOS v2.0
      /// 
      /// Locales: en, fr
      static let cmeFbFXMText = Rswift.StringResource(key: "CME-Fb-FXM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You have a ticket
      /// 
      /// Locales: en, fr
      static let zkE8XO8Text = Rswift.StringResource(key: "3Zk-E8-xO8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You have no conversation.
      /// 
      /// Locales: en, fr
      static let dtAGhExgText = Rswift.StringResource(key: "dtA-Gh-exg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You recently added these events.
      /// 
      /// Locales: en, fr
      static let mk6Qx3RAText = Rswift.StringResource(key: "Mk6-Qx-3RA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You'll see profiles from active events
      /// 
      /// Locales: en, fr
      static let a3aOYZoHText = Rswift.StringResource(key: "a3a-OY-zoH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You're going, interested or invited.
      /// 
      /// Locales: en, fr
      static let ufYZHXpsText = Rswift.StringResource(key: "ufY-zH-Xps.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: © Tasty Electrons SAS
      /// 
      /// Locales: en, fr
      static let kCi6bNysText = Rswift.StringResource(key: "KCi-6b-nys.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      
      /// en translation: 100
      /// 
      /// Locales: en, fr
      static func wMdMfAXaText(_: Void = ()) -> String {
        return NSLocalizedString("WMd-Mf-aXa.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1234
      /// 
      /// Locales: en, fr
      static func oWsAP9BDPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("OWs-aP-9BD.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 12345 characters left
      /// 
      /// Locales: en, fr
      static func jFyEjGbrFooterTitle(_: Void = ()) -> String {
        return NSLocalizedString("jFy-Ej-gbr.footerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 14:14
      /// 
      /// Locales: en, fr
      static func gj6O3BKIText(_: Void = ()) -> String {
        return NSLocalizedString("GJ6-O3-bKI.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 15:25
      /// 
      /// Locales: en, fr
      static func sdIGs1oxText(_: Void = ()) -> String {
        return NSLocalizedString("SdI-Gs-1ox.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 16:05
      /// 
      /// Locales: en, fr
      static func fiUsQwZText(_: Void = ()) -> String {
        return NSLocalizedString("7fi-us-QwZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 18
      /// 
      /// Locales: en, fr
      static func e4nKtXGXText(_: Void = ()) -> String {
        return NSLocalizedString("e4n-Kt-XGX.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, fr
      static func jFyEjGbrHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("jFy-Ej-gbr.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, fr
      static func lmASI9y1Title(_: Void = ()) -> String {
        return NSLocalizedString("lmA-SI-9y1.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About Web
      /// 
      /// Locales: en, fr
      static func f8IHcQWCTitle(_: Void = ()) -> String {
        return NSLocalizedString("f8I-Hc-QWC.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About Woojo
      /// 
      /// Locales: en, fr
      static func zvlTmPqVText(_: Void = ()) -> String {
        return NSLocalizedString("ZVL-Tm-PqV.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Events
      /// 
      /// Locales: en, fr
      static func hcK4sVgHTitle(_: Void = ()) -> String {
        return NSLocalizedString("hcK-4s-VgH.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Age
      /// 
      /// Locales: en, fr
      static func ctzIOZb0HeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ctz-iO-zb0.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Albums
      /// 
      /// Locales: en, fr
      static func cmndqYnzTitle(_: Void = ()) -> String {
        return NSLocalizedString("CMN-DQ-ynz.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, fr
      static func sr9BlS56SegmentTitles2(_: Void = ()) -> String {
        return NSLocalizedString("sr9-Bl-S56.segmentTitles[2]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BCN - Barcelona
      /// 
      /// Locales: en, fr
      static func dCfQzB9sText(_: Void = ()) -> String {
        return NSLocalizedString("dCf-Qz-b9s.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Based on your tastes.
      /// 
      /// Locales: en, fr
      static func jwS5H1LText(_: Void = ()) -> String {
        return NSLocalizedString("8jw-s5-H1L.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Button
      /// 
      /// Locales: en
      static func dAuIKCaLNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("DAu-iK-CaL.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Button
      /// 
      /// Locales: en, fr
      static func eEvCHOToNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("EEv-cH-oTo.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Button
      /// 
      /// Locales: en, fr
      static func ycDU293NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("0yc-dU-293.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CDG - Paris
      /// 
      /// Locales: en, fr
      static func r9GvSfWText(_: Void = ()) -> String {
        return NSLocalizedString("2r9-Gv-SfW.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, fr
      static func yN8HoCI5Title(_: Void = ()) -> String {
        return NSLocalizedString("yN8-Ho-cI5.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Candidates
      /// 
      /// Locales: en, fr
      static func vc7JZMOBTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vc7-JZ-mOB.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Place
      /// 
      /// Locales: en, fr
      static func wklUzUs3NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wkl-Uz-us3.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chats
      /// 
      /// Locales: en, fr
      static func zDqS1ZScTitle(_: Void = ()) -> String {
        return NSLocalizedString("zDq-s1-zSc.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choose a date and a place
      /// 
      /// Locales: en, fr
      static func xiHsIyqText(_: Void = ()) -> String {
        return NSLocalizedString("1XI-hs-iyq.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact the Woojo Team
      /// 
      /// Locales: en, fr
      static func ciQfXvpText(_: Void = ()) -> String {
        return NSLocalizedString("7Ci-Qf-Xvp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Couldn't find an event?
      /// 
      /// Locales: en, fr
      static func rmsI7MQlText(_: Void = ()) -> String {
        return NSLocalizedString("Rms-I7-mQl.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Group
      /// 
      /// Locales: en, fr
      static func z26MtYNINormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("z26-mt-YNI.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Account
      /// 
      /// Locales: en, fr
      static func dnqidru8NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("DNQ-iD-RU8.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Discover awesome people!
      /// 
      /// Locales: en, fr
      static func oznQhDuIText(_: Void = ()) -> String {
        return NSLocalizedString("Ozn-qh-DuI.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Discover great events and people.
      /// 
      /// Locales: en, fr
      static func xrBvE3NText(_: Void = ()) -> String {
        return NSLocalizedString("2XR-Bv-E3N.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Discover people to meet there!
      /// 
      /// Locales: en, fr
      static func qJeSq77uText(_: Void = ()) -> String {
        return NSLocalizedString("QJe-sq-77u.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Drag and drop to order, tap for options
      /// 
      /// Locales: en, fr
      static func qMaJ1Q3lFooterTitle(_: Void = ()) -> String {
        return NSLocalizedString("QMa-J1-q3l.footerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enabled
      /// 
      /// Locales: en, fr
      static func jOFYtEwCText(_: Void = ()) -> String {
        return NSLocalizedString("jOF-Yt-EwC.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter your flight details
      /// 
      /// Locales: en, fr
      static func zL2CSKvyText(_: Void = ()) -> String {
        return NSLocalizedString("zL2-CS-kvy.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Event
      /// 
      /// Locales: en, fr
      static func cRnZFBckTitle(_: Void = ()) -> String {
        return NSLocalizedString("cRn-ZF-Bck.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Event sources
      /// 
      /// Locales: en, fr
      static func ju2L5YbVHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ju2-L5-YbV.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Eventbrite
      /// 
      /// Locales: en
      static func iND9bRqHTitle(_: Void = ()) -> String {
        return NSLocalizedString("iND-9b-RqH.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static func i4ICGSEOText(_: Void = ()) -> String {
        return NSLocalizedString("i4I-cG-sEO.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static func kfs9qKLBTitle(_: Void = ()) -> String {
        return NSLocalizedString("kfs-9q-KLB.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, fr
      static func nqlWVYRnTitle(_: Void = ()) -> String {
        return NSLocalizedString("nql-WV-yRn.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Flight number
      /// 
      /// Locales: en, fr
      static func as0XJH2QText(_: Void = ()) -> String {
        return NSLocalizedString("as0-xJ-h2Q.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Flying soon?
      /// 
      /// Locales: en, fr
      static func zTkNxD9jText(_: Void = ()) -> String {
        return NSLocalizedString("ZTk-Nx-d9j.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gender
      /// 
      /// Locales: en, fr
      static func jpBnPSjHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("6jp-bn-pSj.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get notified even when outside the app
      /// 
      /// Locales: en, fr
      static func nHBDZVjaFooterTitle(_: Void = ()) -> String {
        return NSLocalizedString("nHB-DZ-vja.footerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help grow the community
      /// 
      /// Locales: en, fr
      static func aAf6WVyRText(_: Void = ()) -> String {
        return NSLocalizedString("AAf-6W-VyR.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ignore
      /// 
      /// Locales: en, fr
      static func v8wFrT25NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("V8w-Fr-t25.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Image Label 
      /// 
      /// Locales: en, fr
      static func o6ADG8EZText(_: Void = ()) -> String {
        return NSLocalizedString("o6A-dG-8EZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Item
      /// 
      /// Locales: en, fr
      static func aeBQUOFDTitle(_: Void = ()) -> String {
        return NSLocalizedString("AeB-qU-OFD.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: L
      /// 
      /// Locales: en, fr
      static func urmAmUl4Text(_: Void = ()) -> String {
        return NSLocalizedString("urm-am-ul4.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func bprjBpText(_: Void = ()) -> String {
        return NSLocalizedString("38B-PR-JBp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func ga6QQLOSText(_: Void = ()) -> String {
        return NSLocalizedString("Ga6-qQ-LOS.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func gnz7fXmwText(_: Void = ()) -> String {
        return NSLocalizedString("Gnz-7f-xmw.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func jXyU4CRFText(_: Void = ()) -> String {
        return NSLocalizedString("JXy-u4-CRF.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func miieodReText(_: Void = ()) -> String {
        return NSLocalizedString("MII-EO-dRe.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func srPSrTSRText(_: Void = ()) -> String {
        return NSLocalizedString("SrP-sr-tSR.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func umgX8HXYText(_: Void = ()) -> String {
        return NSLocalizedString("umg-X8-hXY.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func vuff4HerText(_: Void = ()) -> String {
        return NSLocalizedString("VUF-F4-Her.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func wZ7QPDoCText(_: Void = ()) -> String {
        return NSLocalizedString("wZ7-qP-doC.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func wnpYwG7LText(_: Void = ()) -> String {
        return NSLocalizedString("wnp-yw-g7L.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func wq2RuAuXText(_: Void = ()) -> String {
        return NSLocalizedString("wq2-ru-auX.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en, fr
      static func ynd2mITkText(_: Void = ()) -> String {
        return NSLocalizedString("ynd-2m-iTk.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Load Earlier Messages
      /// 
      /// Locales: en, fr
      static func hR4J9MNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("58h-r4-J9M.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, fr
      static func iaJWMDCgNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("IaJ-wM-dCg.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      /// 
      /// Locales: en, fr
      static func skxzjLzText(_: Void = ()) -> String {
        return NSLocalizedString("3SK-xZ-JLz.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MMessageLabel
      /// 
      /// Locales: en, fr
      static func jXeLxOQFText(_: Void = ()) -> String {
        return NSLocalizedString("JXe-lx-oQF.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make Plan!
      /// 
      /// Locales: en, fr
      static func vF7ePIfNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("5vF-7e-PIf.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Events Filter or Preferences
      /// 
      /// Locales: en, fr
      static func hVPO1FRjText(_: Void = ()) -> String {
        return NSLocalizedString("hVP-o1-fRj.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Meet at the airport or on the plane!
      /// 
      /// Locales: en, fr
      static func bNuCdYVZText(_: Void = ()) -> String {
        return NSLocalizedString("bNu-cd-yVZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Meet people on the go
      /// 
      /// Locales: en, fr
      static func gBDJ42aTText(_: Void = ()) -> String {
        return NSLocalizedString("gBD-j4-2aT.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Men
      /// 
      /// Locales: en, fr
      static func sr9BlS56SegmentTitles1(_: Void = ()) -> String {
        return NSLocalizedString("sr9-Bl-S56.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Muserlabel
      /// 
      /// Locales: en, fr
      static func xMGN4BBText(_: Void = ()) -> String {
        return NSLocalizedString("9xM-gN-4BB.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Events
      /// 
      /// Locales: en, fr
      static func aG4IlNNEText(_: Void = ()) -> String {
        return NSLocalizedString("aG4-Il-NNE.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Events
      /// 
      /// Locales: en, fr
      static func zkYBbTitle(_: Void = ()) -> String {
        return NSLocalizedString("748-zk-yBb.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Facebook events
      /// 
      /// Locales: en, fr
      static func gvlFMNM7Text(_: Void = ()) -> String {
        return NSLocalizedString("gvl-FM-nM7.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Matches
      /// 
      /// Locales: en, fr
      static func iB6YQU39Text(_: Void = ()) -> String {
        return NSLocalizedString("iB6-YQ-U39.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Messages
      /// 
      /// Locales: en, fr
      static func nEInQfMText(_: Void = ()) -> String {
        return NSLocalizedString("9nE-in-qfM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New People
      /// 
      /// Locales: en, fr
      static func pf7ESBhpText(_: Void = ()) -> String {
        return NSLocalizedString("PF7-ES-bhp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, fr
      static func gOo0sPHMTitle(_: Void = ()) -> String {
        return NSLocalizedString("gOo-0s-PHM.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, fr
      static func xCRE58SpText(_: Void = ()) -> String {
        return NSLocalizedString("xCR-E5-8Sp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notify me of
      /// 
      /// Locales: en, fr
      static func ptbJp8pBHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ptb-jp-8pB.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Occupation
      /// 
      /// Locales: en, fr
      static func dLkCx4GYHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("DLk-cx-4GY.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Photos
      /// 
      /// Locales: en, fr
      static func dxmYh9hhTitle(_: Void = ()) -> String {
        return NSLocalizedString("DXM-yh-9hh.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Photos
      /// 
      /// Locales: en, fr
      static func qMaJ1Q3lHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("QMa-J1-q3l.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static func gynMcUmoTitle(_: Void = ()) -> String {
        return NSLocalizedString("gyn-Mc-umo.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static func ku7SSNN9Title(_: Void = ()) -> String {
        return NSLocalizedString("Ku7-SS-nN9.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en, fr
      static func vYbUP1h4Text(_: Void = ()) -> String {
        return NSLocalizedString("VYb-UP-1h4.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, fr
      static func nqPHh0VPText(_: Void = ()) -> String {
        return NSLocalizedString("nqP-Hh-0VP.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, fr
      static func fzjIoMZ0Title(_: Void = ()) -> String {
        return NSLocalizedString("fzj-io-MZ0.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, fr
      static func oyC91BHXText(_: Void = ()) -> String {
        return NSLocalizedString("OyC-91-bHX.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Push notifications
      /// 
      /// Locales: en, fr
      static func nHBDZVjaHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("nHB-DZ-vja.headerTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Review
      /// 
      /// Locales: en, fr
      static func d3PTsBHyNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("d3P-ts-bHy.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save Flight
      /// 
      /// Locales: en, fr
      static func daRLOGcfNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("DaR-lO-Gcf.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Say something about yourself...
      /// 
      /// Locales: en, fr
      static func jw2MPUwZText(_: Void = ()) -> String {
        return NSLocalizedString("JW2-MP-UwZ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, fr
      static func eYNK0M5FNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("eYN-K0-m5F.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, fr
      static func va2SrF53Title(_: Void = ()) -> String {
        return NSLocalizedString("Va2-Sr-F53.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Woojo!
      /// 
      /// Locales: en, fr
      static func pJaWc77DNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("pJa-Wc-77D.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Woojo!
      /// 
      /// Locales: en, fr
      static func u4UEGYDKNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("U4U-EG-yDK.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap the logo to integrate
      /// 
      /// Locales: en, fr
      static func xYzKdH5PText(_: Void = ()) -> String {
        return NSLocalizedString("xYz-kd-h5P.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap to add or remove from your filter.
      /// 
      /// Locales: en, fr
      static func cY6SSCaeText(_: Void = ()) -> String {
        return NSLocalizedString("cY6-SS-cae.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap to add or remove from your filter.
      /// 
      /// Locales: en, fr
      static func icjAgText(_: Void = ()) -> String {
        return NSLocalizedString("873-IC-JAg.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap to add to your filter.
      /// 
      /// Locales: en, fr
      static func s8oXcMhkText(_: Void = ()) -> String {
        return NSLocalizedString("s8o-Xc-mhk.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap to add to your filter.
      /// 
      /// Locales: en, fr
      static func sbQbFMAText(_: Void = ()) -> String {
        return NSLocalizedString("8Sb-Qb-fMA.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tell us your plan
      /// 
      /// Locales: en, fr
      static func gH7Er6U3Text(_: Void = ()) -> String {
        return NSLocalizedString("gH7-Er-6U3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms & Conditions
      /// 
      /// Locales: en, fr
      static func m8aB0EBMText(_: Void = ()) -> String {
        return NSLocalizedString("M8a-b0-eBM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These are recommended events
      /// 
      /// Locales: en, fr
      static func swlFFG5kText(_: Void = ()) -> String {
        return NSLocalizedString("swl-FF-G5k.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These are your Eventbrite events
      /// 
      /// Locales: en, fr
      static func oNaALHcTText(_: Void = ()) -> String {
        return NSLocalizedString("ONa-aL-hcT.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These are your Facebook events
      /// 
      /// Locales: en, fr
      static func lvjAZMNcText(_: Void = ()) -> String {
        return NSLocalizedString("lvj-AZ-MNc.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These are your events
      /// 
      /// Locales: en, fr
      static func b2XBwF6NText(_: Void = ()) -> String {
        return NSLocalizedString("b2X-bw-F6N.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Those in your filter have a green checkmark.
      /// 
      /// Locales: en, fr
      static func dYBHGUVGText(_: Void = ()) -> String {
        return NSLocalizedString("dYB-hG-UVG.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Those in your filter have a green checkmark.
      /// 
      /// Locales: en, fr
      static func ltQIxUj7Text(_: Void = ()) -> String {
        return NSLocalizedString("LtQ-Ix-Uj7.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To activate an event, tap on it's image
      /// 
      /// Locales: en, fr
      static func gF4WT55LText(_: Void = ()) -> String {
        return NSLocalizedString("gF4-wT-55L.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To see the description, tap on the details
      /// 
      /// Locales: en, fr
      static func s7SYNdText(_: Void = ()) -> String {
        return NSLocalizedString("23S-7S-YNd.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WW
      /// 
      /// Locales: en, fr
      static func ajQu1uPText(_: Void = ()) -> String {
        return NSLocalizedString("6AJ-qu-1uP.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wanna see more people?
      /// 
      /// Locales: en, fr
      static func qC8B4GVsText(_: Void = ()) -> String {
        return NSLocalizedString("qC8-B4-GVs.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Women
      /// 
      /// Locales: en, fr
      static func sr9BlS56SegmentTitles0(_: Void = ()) -> String {
        return NSLocalizedString("sr9-Bl-S56.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Woojo for iOS v2.0
      /// 
      /// Locales: en, fr
      static func cmeFbFXMText(_: Void = ()) -> String {
        return NSLocalizedString("CME-Fb-FXM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have a ticket
      /// 
      /// Locales: en, fr
      static func zkE8XO8Text(_: Void = ()) -> String {
        return NSLocalizedString("3Zk-E8-xO8.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have no conversation.
      /// 
      /// Locales: en, fr
      static func dtAGhExgText(_: Void = ()) -> String {
        return NSLocalizedString("dtA-Gh-exg.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You recently added these events.
      /// 
      /// Locales: en, fr
      static func mk6Qx3RAText(_: Void = ()) -> String {
        return NSLocalizedString("Mk6-Qx-3RA.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You'll see profiles from active events
      /// 
      /// Locales: en, fr
      static func a3aOYZoHText(_: Void = ()) -> String {
        return NSLocalizedString("a3a-OY-zoH.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You're going, interested or invited.
      /// 
      /// Locales: en, fr
      static func ufYZHXpsText(_: Void = ()) -> String {
        return NSLocalizedString("ufY-zH-Xps.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: © Tasty Electrons SAS
      /// 
      /// Locales: en, fr
      static func kCi6bNysText(_: Void = ()) -> String {
        return NSLocalizedString("KCi-6b-nys.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.plurals` struct is generated, and contains static references to 3 localization keys.
    struct plurals {
      /// en translation: You have %#@eventCount@
      /// 
      /// Locales: en
      static let peopleDetailsCommonEvents = Rswift.StringResource(key: "peopleDetailsCommonEvents", tableName: "Plurals", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have %#@friendCount@
      /// 
      /// Locales: en, fr
      static let peopleDetailsCommonFriends = Rswift.StringResource(key: "peopleDetailsCommonFriends", tableName: "Plurals", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You have %#@interestCount@
      /// 
      /// Locales: en, fr
      static let peopleDetailsCommonInterests = Rswift.StringResource(key: "peopleDetailsCommonInterests", tableName: "Plurals", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      
      /// en translation: You have %#@eventCount@
      /// 
      /// Locales: en
      static func peopleDetailsCommonEvents(eventCount value1: Int) -> String {
        return String(format: NSLocalizedString("peopleDetailsCommonEvents", tableName: "Plurals", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You have %#@friendCount@
      /// 
      /// Locales: en, fr
      static func peopleDetailsCommonFriends(friendCount value1: Int) -> String {
        return String(format: NSLocalizedString("peopleDetailsCommonFriends", tableName: "Plurals", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: You have %#@interestCount@
      /// 
      /// Locales: en, fr
      static func peopleDetailsCommonInterests(interestCount value1: Int) -> String {
        return String(format: NSLocalizedString("peopleDetailsCommonInterests", tableName: "Plurals", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EventTableViewCell.validate()
      try _CandidateCardView.validate()
    }
    
    struct _AlbumsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AlbumsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "albumCell"
      let name = "AlbumsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AlbumsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlbumsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CandidateCardOverlayView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CandidateCardOverlayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CandidateCardView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CandidateCardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'CandidateCardView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "briefcase", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'briefcase' is used in nib 'CandidateCardView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CandidateCommonEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CandidateCommonEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "commonEventCell"
      let name = "CandidateCommonEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CandidateCommonEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CandidateCommonEventTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CandidateExtraCommonEventsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CandidateExtraCommonEventsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "extraCommonEventsCell"
      let name = "CandidateExtraCommonEventsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CandidateExtraCommonEventsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CandidateExtraCommonEventsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _EventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "eventCell"
      let name = "EventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in nib 'EventTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EventbriteLoginView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EventbriteLoginView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UserChatBannerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserChatBannerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UserCommonFriendCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UserCommonFriendCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "commonFriendCell"
      let name = "UserCommonFriendCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserCommonFriendCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCommonFriendCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserCommonItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UserCommonItemCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "commonItemCell"
      let name = "UserCommonItemCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserCommonItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCommonItemCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserDetailsCommonEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UserDetailsCommonEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "detailsCommonEventCell"
      let name = "UserDetailsCommonEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserDetailsCommonEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserDetailsCommonEventTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserDetailsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserDetailsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "events_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'events_tab' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chats_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chats_tab' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "people_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'people_tab' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutWebViewController = StoryboardViewControllerResource<AboutWebViewController>(identifier: "AboutWebViewController")
      let alChatViewController = StoryboardViewControllerResource<ChatViewController>(identifier: "ALChatViewController")
      let alViewController = StoryboardViewControllerResource<MessagesViewController>(identifier: "ALViewController")
      let bundle = R.hostingBundle
      let eventDetailsViewController = StoryboardViewControllerResource<EventDetailsViewController>(identifier: "EventDetailsViewController")
      let facebookAlbumPhotosViewController = StoryboardViewControllerResource<FacebookAlbumPhotosViewController>(identifier: "FacebookAlbumPhotosViewController")
      let facebookAlbumsViewController = StoryboardViewControllerResource<FacebookAlbumsViewController>(identifier: "FacebookAlbumsViewController")
      let facebookPhotosNavigationController = StoryboardViewControllerResource<NavigationController>(identifier: "FacebookPhotosNavigationController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let name = "Main"
      let settingsNavigationController = StoryboardViewControllerResource<NavigationController>(identifier: "SettingsNavigationController")
      
      func aboutWebViewController(_: Void = ()) -> AboutWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutWebViewController)
      }
      
      func alChatViewController(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alChatViewController)
      }
      
      func alViewController(_: Void = ()) -> MessagesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alViewController)
      }
      
      func eventDetailsViewController(_: Void = ()) -> EventDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDetailsViewController)
      }
      
      func facebookAlbumPhotosViewController(_: Void = ()) -> FacebookAlbumPhotosViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facebookAlbumPhotosViewController)
      }
      
      func facebookAlbumsViewController(_: Void = ()) -> FacebookAlbumsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facebookAlbumsViewController)
      }
      
      func facebookPhotosNavigationController(_: Void = ()) -> NavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: facebookPhotosNavigationController)
      }
      
      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      func settingsNavigationController(_: Void = ()) -> NavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsNavigationController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "events_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'events_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_rounded") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_rounded' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:0GL-v8-rWS:image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:0GL-v8-rWS:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tip") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tip' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:Tsb-Ep-m6F:image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Tsb-Ep-m6F:image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chats_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chats_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "people_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'people_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Facebook icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Facebook icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "people") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'people' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_camera' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "online_show") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'online_show' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Eventbrite icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Eventbrite icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().facebookAlbumPhotosViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facebookAlbumPhotosViewController' could not be loaded from storyboard 'Main' as 'FacebookAlbumPhotosViewController'.") }
        if _R.storyboard.main().facebookAlbumsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facebookAlbumsViewController' could not be loaded from storyboard 'Main' as 'FacebookAlbumsViewController'.") }
        if _R.storyboard.main().alChatViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alChatViewController' could not be loaded from storyboard 'Main' as 'ChatViewController'.") }
        if _R.storyboard.main().aboutWebViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutWebViewController' could not be loaded from storyboard 'Main' as 'AboutWebViewController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().settingsNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsNavigationController' could not be loaded from storyboard 'Main' as 'NavigationController'.") }
        if _R.storyboard.main().facebookPhotosNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'facebookPhotosNavigationController' could not be loaded from storyboard 'Main' as 'NavigationController'.") }
        if _R.storyboard.main().eventDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDetailsViewController' could not be loaded from storyboard 'Main' as 'EventDetailsViewController'.") }
        if _R.storyboard.main().alViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alViewController' could not be loaded from storyboard 'Main' as 'MessagesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
